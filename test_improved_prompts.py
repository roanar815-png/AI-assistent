#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json

def test_improved_prompts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
    print("=" * 60)
    
    # URL API
    from config import settings
    api_url = f"{settings.base_url}/api/chat/message"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_cases = [
        {
            "message": "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü?",
            "expected_keywords": ["—ç—Ç–∞–ø—ã", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Å—Ä–æ–∫–∏", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ø–∞—Å–ø–æ—Ä—Ç", "–∑–∞—è–≤–ª–µ–Ω–∏–µ"],
            "description": "–í–æ–ø—Ä–æ—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü - –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç"
        },
        {
            "message": "–ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –µ—Å—Ç—å –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
            "expected_keywords": ["–ª—å–≥–æ—Ç—ã", "–Ω–∞–ª–æ–≥", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º—ã", "—É—Å–ª–æ–≤–∏—è"],
            "description": "–í–æ–ø—Ä–æ—Å –æ –ª—å–≥–æ—Ç–∞—Ö - –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ"
        },
        {
            "message": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞?",
            "expected_keywords": ["—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫—Ä–µ–¥–∏—Ç", "–≥—Ä–∞–Ω—Ç", "–∏–Ω–≤–µ—Å—Ç–æ—Ä", "–ø—Ä–æ–≥—Ä–∞–º–º—ã"],
            "description": "–í–æ–ø—Ä–æ—Å –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ - –¥–æ–ª–∂–µ–Ω –æ–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        },
        {
            "message": "–ß—Ç–æ —Ç–∞–∫–æ–µ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è?",
            "expected_keywords": ["–£–°–ù", "–Ω–∞–ª–æ–≥", "–ø—Ä–æ—Ü–µ–Ω—Ç", "–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥", "–ø—Ä–∏–º–µ—Ä"],
            "description": "–ü—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
        },
        {
            "message": "–ö–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥?",
            "expected_keywords": ["–∫–ª–∏–µ–Ω—Ç—ã", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "—à–∞–≥–∏"],
            "description": "–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        message = test_case["message"]
        expected_keywords = test_case["expected_keywords"]
        description = test_case["description"]
        
        print(f"{i}. {description}")
        print(f"   –ó–∞–ø—Ä–æ—Å: '{message}'")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(api_url, json={
                "user_id": f"test_user_prompts_{i}",
                "message": message
            }, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                response_text = data.get('response', '')
                
                print(f"   –°—Ç–∞—Ç—É—Å: OK")
                print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –û—Ç–≤–µ—Ç: {response_text[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                found_keywords = []
                for keyword in expected_keywords:
                    if keyword.lower() in response_text.lower():
                        found_keywords.append(keyword)
                
                if len(found_keywords) >= len(expected_keywords) * 0.6:  # 60% –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    print(f"   –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ {len(found_keywords)}/{len(expected_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {found_keywords}")
                else:
                    print(f"   –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(found_keywords)}/{len(expected_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {found_keywords}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                if any(marker in response_text for marker in ["‚Ä¢", "-", "1.", "2.", "3.", "üìã", "‚öñÔ∏è", "üìä"]):
                    print("   –£–°–ü–ï–•: –û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω (–µ—Å—Ç—å —Å–ø–∏—Å–∫–∏/—ç–º–æ–¥–∑–∏)")
                else:
                    print("   –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Ç–≤–µ—Ç –Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω")
                    
            else:
                print(f"   –û–®–ò–ë–ö–ê: HTTP {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print("   –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            print(f"   –û–®–ò–ë–ö–ê: {e}")
        
        print()

if __name__ == "__main__":
    test_improved_prompts()
