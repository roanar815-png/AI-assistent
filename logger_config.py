"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import logging
import sys
from pathlib import Path
from datetime import datetime


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
LOG_DIR = Path("logs")
LOG_DIR.mkdir(exist_ok=True)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
LOG_FORMAT = "%(asctime)s | %(levelname)-8s | %(name)-25s | %(funcName)-20s | %(message)s"
DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
COLORS = {
    'DEBUG': '\033[36m',      # Cyan
    'INFO': '\033[32m',       # Green
    'WARNING': '\033[33m',    # Yellow
    'ERROR': '\033[31m',      # Red
    'CRITICAL': '\033[35m',   # Magenta
    'RESET': '\033[0m'        # Reset
}


class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        levelname = record.levelname
        if levelname in COLORS:
            record.levelname = f"{COLORS[levelname]}{levelname}{COLORS['RESET']}"
        return super().format(record)


def setup_logger(name: str, level: int = logging.INFO) -> logging.Logger:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –µ–¥–∏–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__ –º–æ–¥—É–ª—è)
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO)
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    logger = logging.getLogger(name)
    
    # –ï—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if logger.handlers:
        return logger
    
    logger.setLevel(level)
    logger.propagate = False
    
    # === –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Å —Ü–≤–µ—Ç–∞–º–∏) ===
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_formatter = ColoredFormatter(LOG_FORMAT, datefmt=DATE_FORMAT)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # === –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ–±—â–∏–π –ª–æ–≥ ===
    today = datetime.now().strftime("%Y-%m-%d")
    file_handler = logging.FileHandler(
        LOG_DIR / f"app_{today}.log",
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    file_formatter = logging.Formatter(LOG_FORMAT, datefmt=DATE_FORMAT)
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)
    
    # === –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ ===
    error_handler = logging.FileHandler(
        LOG_DIR / f"errors_{today}.log",
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(file_formatter)
    logger.addHandler(error_handler)
    
    return logger


def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__ –º–æ–¥—É–ª—è)
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return setup_logger(name)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_function_call(logger: logging.Logger, func_name: str, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    params = ", ".join([f"{k}={v}" for k, v in kwargs.items()])
    logger.info(f"üîÑ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}({params})")


def log_success(logger: logging.Logger, message: str, **details):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if details:
        details_str = " | ".join([f"{k}={v}" for k, v in details.items()])
        logger.info(f"‚úÖ {message} | {details_str}")
    else:
        logger.info(f"‚úÖ {message}")


def log_error(logger: logging.Logger, message: str, error: Exception = None, **details):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    if details:
        details_str = " | ".join([f"{k}={v}" for k, v in details.items()])
        error_msg = f"‚ùå {message} | {details_str}"
    else:
        error_msg = f"‚ùå {message}"
    
    if error:
        logger.error(f"{error_msg} | Exception: {str(error)}", exc_info=True)
    else:
        logger.error(error_msg)


def log_warning(logger: logging.Logger, message: str, **details):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    if details:
        details_str = " | ".join([f"{k}={v}" for k, v in details.items()])
        logger.warning(f"‚ö†Ô∏è {message} | {details_str}")
    else:
        logger.warning(f"‚ö†Ô∏è {message}")


# –ì–ª–∞–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_logger = get_logger("AIAI_APP")

