"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
"""
from fastapi import APIRouter, HTTPException
from typing import List
from models.schemas import (
    ChatMessage, ChatResponse, 
    InteractiveAutofillRequest, AnalyzeDocumentRequest, 
    AskQuestionsRequest, AnswerQuestionRequest, FinalizeAutofillRequest,
    CreateDocumentRequest
)
from services import assistant_service
from integrations import openai_service, google_sheets_service
from logger_config import get_logger, log_success, log_error, log_warning

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

router = APIRouter(prefix="/api/chat", tags=["chat"])


@router.post("/message", response_model=ChatResponse)
async def send_message(message: ChatMessage):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å user_id –∏ —Ç–µ–∫—Å—Ç–æ–º
    
    Returns:
        –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    logger.info("üí¨ POST /api/chat/message (ASYNC)")
    logger.info(f"   User ID: {message.user_id}")
    logger.info(f"   Message: {message.message[:100]}{'...' if len(message.message) > 100 else ''}")
    
    try:
        logger.debug("–í—ã–∑–æ–≤ assistant_service.process_message_async...")
        print(f"[API DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message}")
        response = await assistant_service.process_message_async(
            user_id=message.user_id,
            message=message.message
        )
        print(f"[API DEBUG] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: {response.action}")
        
        log_success(logger, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ", 
                   user_id=message.user_id,
                   response_length=len(response.response) if response.response else 0)
        
        logger.debug(f"   Response preview: {response.response[:100] if response.response else 'EMPTY'}...")
        return response
        
    except Exception as e:
        log_error(logger, f"–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                 error=e, user_id=message.user_id)
        raise HTTPException(status_code=500, detail=str(e))


## –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: —É–¥–∞–ª–µ–Ω—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã /history/{user_id}


@router.post("/create-document")
async def create_document_from_chat(request: CreateDocumentRequest):
    """
    –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    logger.info(f"üìù POST /api/chat/create-document")
    logger.info(f"   User ID: {request.user_id}")
    logger.info(f"   Template ID: {request.template_id}")
    logger.info(f"   Send Email: {request.send_email}")
    logger.debug(f"   User Data keys: {list(request.user_data.keys())}")
    
    try:
        logger.info(f"[DEBUG] api/chat.py: –í—ã–∑—ã–≤–∞–µ–º create_document_from_template –¥–ª—è user_id={request.user_id}")
        result = assistant_service.create_document_from_template(
            request.user_id, request.template_id, request.user_data, 
            request.conversation_data, request.send_email
        )
        logger.info(f"[DEBUG] api/chat.py: create_document_from_template –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('status', 'unknown')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ Google Sheets
        if result and result.get("status") == "success":
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                template_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω"
                try:
                    templates = assistant_service.get_available_templates()
                    template_name = next((t['name'] for t in templates if t['template_id'] == request.template_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω")
                except:
                    pass
                
                google_sheets_service.save_document({
                    "user_id": request.user_id,
                    "full_name": request.user_data.get("full_name", ""),
                    "email": request.user_data.get("email", ""),
                    "document_type": "–¥–æ–∫—É–º–µ–Ω—Ç",
                    "template_name": template_name,
                    "filepath": result.get("filepath", ""),
                    "download_url": result.get("download_url", ""),
                    "completeness_score": 100,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                    "confidence_score": 100,
                    "data_quality": "–í—ã—Å–æ–∫–æ–µ"
                })
                logger.info("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Google Sheets: {e}")
        
        log_success(logger, "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", 
                   user_id=request.user_id, template_id=request.template_id, 
                   email_sent=request.send_email)
        return result
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞", error=e, 
                 user_id=request.user_id, template_id=request.template_id)
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/preview-document")
async def preview_document(template_id: str, user_data: dict):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    
    Args:
        template_id: ID —à–∞–±–ª–æ–Ω–∞
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        result = assistant_service.preview_document(template_id, user_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill")
async def start_interactive_autofill(user_id: str, message: str = None):
    """
    –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    try:
        result = assistant_service.start_interactive_autofill(user_id, message)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/analyze-document")
async def analyze_document_for_autofill(user_id: str, document_name: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Returns:
        –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    """
    try:
        result = assistant_service.analyze_document_for_autofill(user_id, document_name)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/ask-questions")
async def ask_questions_for_autofill(user_id: str, document_name: str, current_data: dict = None):
    """
    –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        current_data: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        result = assistant_service.ask_questions_for_autofill(user_id, document_name, current_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/answer-question")
async def answer_question_for_autofill(user_id: str, question_id: str, answer: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question_id: ID –≤–æ–ø—Ä–æ—Å–∞
        answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        result = assistant_service.answer_question_for_autofill(user_id, question_id, answer)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/finalize")
async def finalize_autofill(user_id: str, document_name: str):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        –°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    """
    try:
        result = assistant_service.finalize_autofill(user_id, document_name)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/performance")
async def get_performance_metrics():
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    
    Returns:
        –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    logger.info("–°–¢–ê–¢–ò–°–¢–ò–ö–ê: GET /api/chat/performance")
    try:
        metrics = assistant_service.get_performance_metrics()
        log_success(logger, "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã", 
                   total_requests=metrics.get("total_requests", 0),
                   cache_hit_rate=metrics.get("cache_hit_rate", "0%"))
        return metrics
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", error=e)
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/batch")
async def process_batch_messages(messages: List[ChatMessage]):
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    """
    logger.info(f"üöÄ POST /api/chat/batch - {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        requests = []
        for msg in messages:
            history = assistant_service.get_conversation_history(msg.user_id)
            requests.append({
                "message": msg.message,
                "history": history
            })
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        responses = await openai_service.process_multiple_requests(requests)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        results = []
        for i, response_text in enumerate(responses):
            results.append(ChatResponse(
                response=response_text,
                action="chat",
                document_suggestion=None
            ))
        
        log_success(logger, "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                   messages_count=len(messages),
                   success_count=len([r for r in results if r.response]))
        
        return {"results": results}
        
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏", error=e)
        raise HTTPException(status_code=500, detail=str(e))