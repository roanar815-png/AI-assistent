"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
"""
from fastapi import APIRouter, HTTPException
from models.schemas import (
    ChatMessage, ChatResponse, 
    InteractiveAutofillRequest, AnalyzeDocumentRequest, 
    AskQuestionsRequest, AnswerQuestionRequest, FinalizeAutofillRequest
)
from services import assistant_service
from logger_config import get_logger, log_success, log_error, log_warning

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

router = APIRouter(prefix="/api/chat", tags=["chat"])


@router.post("/message", response_model=ChatResponse)
async def send_message(message: ChatMessage):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å user_id –∏ —Ç–µ–∫—Å—Ç–æ–º
    
    Returns:
        –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    logger.info("üí¨ POST /api/chat/message")
    logger.info(f"   User ID: {message.user_id}")
    logger.info(f"   Message: {message.message[:100]}{'...' if len(message.message) > 100 else ''}")
    
    try:
        logger.debug("–í—ã–∑–æ–≤ assistant_service.process_message...")
        response = assistant_service.process_message(
            user_id=message.user_id,
            message=message.message
        )
        
        log_success(logger, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", 
                   user_id=message.user_id,
                   response_length=len(response.response) if response.response else 0)
        
        logger.debug(f"   Response preview: {response.response[:100] if response.response else 'EMPTY'}...")
        return response
        
    except Exception as e:
        log_error(logger, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                 error=e, user_id=message.user_id)
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/history/{user_id}")
async def get_history(user_id: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    """
    logger.info(f"üìñ GET /api/chat/history/{user_id}")
    try:
        history = assistant_service.get_conversation_history(user_id)
        log_success(logger, "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞", user_id=user_id, 
                   messages_count=len(history) if history else 0)
        return {"history": history}
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏", error=e, user_id=user_id)
        raise HTTPException(status_code=500, detail=str(e))


@router.delete("/history/{user_id}")
async def clear_history(user_id: str):
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    logger.info(f"üóëÔ∏è DELETE /api/chat/history/{user_id}")
    try:
        assistant_service.clear_conversation(user_id)
        log_success(logger, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", user_id=user_id)
        return {"status": "success", "message": "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞"}
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", error=e, user_id=user_id)
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/create-document")
async def create_document_from_chat(
    user_id: str,
    template_id: str,
    user_data: dict,
    conversation_data: dict = None,
    send_email: bool = False
):
    """
    –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        template_id: ID —à–∞–±–ª–æ–Ω–∞
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conversation_data: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        send_email: Bool - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ email
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    logger.info(f"üìù POST /api/chat/create-document")
    logger.info(f"   User ID: {user_id}")
    logger.info(f"   Template ID: {template_id}")
    logger.info(f"   Send Email: {send_email}")
    logger.debug(f"   User Data keys: {list(user_data.keys())}")
    
    try:
        result = assistant_service.create_document_from_template(
            user_id, template_id, user_data, conversation_data, send_email
        )
        log_success(logger, "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", 
                   user_id=user_id, template_id=template_id, 
                   email_sent=send_email)
        return result
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞", error=e, 
                 user_id=user_id, template_id=template_id)
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/preview-document")
async def preview_document(template_id: str, user_data: dict):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    
    Args:
        template_id: ID —à–∞–±–ª–æ–Ω–∞
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        result = assistant_service.preview_document(template_id, user_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill")
async def start_interactive_autofill(user_id: str, message: str = None):
    """
    –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    try:
        result = assistant_service.start_interactive_autofill(user_id, message)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/analyze-document")
async def analyze_document_for_autofill(user_id: str, document_name: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Returns:
        –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    """
    try:
        result = assistant_service.analyze_document_for_autofill(user_id, document_name)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/ask-questions")
async def ask_questions_for_autofill(user_id: str, document_name: str, current_data: dict = None):
    """
    –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        current_data: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        result = assistant_service.ask_questions_for_autofill(user_id, document_name, current_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/answer-question")
async def answer_question_for_autofill(user_id: str, question_id: str, answer: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question_id: ID –≤–æ–ø—Ä–æ—Å–∞
        answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        result = assistant_service.answer_question_for_autofill(user_id, question_id, answer)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/interactive-autofill/finalize")
async def finalize_autofill(user_id: str, document_name: str):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        –°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    """
    try:
        result = assistant_service.finalize_autofill(user_id, document_name)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))