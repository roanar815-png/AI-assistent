"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import os

from config import settings
from api import chat, applications, reports, documents, feedback, analysis
from services import monitoring_service
from integrations import gmail_service, google_sheets_service
from logger_config import get_logger, log_success, log_error, log_warning

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()


async def scheduled_legislation_check():
    """
    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
    """
    logger.info("=" * 80)
    logger.info("üîç –ó–ê–ü–£–°–ö –ü–õ–ê–ù–û–í–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ê")
    logger.info("=" * 80)
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞...")
        updates = await monitoring_service.check_legislation_updates()
        log_success(logger, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if updates:
            logger.info(f"üìß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö ({len(updates)} —à—Ç.)")
            subject = "üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ú–°–ü"
            body = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –¥–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:

"""
            for update in updates[:5]:
                body += f"‚Ä¢ {update['title']}\n  {update['url']}\n\n"
            
            body += """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ "–û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏"
"""
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets...")
            users = google_sheets_service.get_all_users()
            recipients = [user.get('Email') for user in users if user.get('Email')]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if settings.gmail_user and settings.gmail_user not in recipients:
                recipients.append(settings.gmail_user)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {settings.gmail_user}")
            
            if recipients:
                logger.info(f"üì¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º...")
                sent_count = gmail_service.send_bulk_email(
                    recipients=recipients,
                    subject=subject,
                    body=body,
                    html=False
                )
                log_success(logger, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                           sent=sent_count, total=len(recipients))
            else:
                log_warning(logger, "–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
        else:
            logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", error=e)


async def scheduled_event_reminders():
    """
    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    """
    logger.info("=" * 80)
    logger.info("üìÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–•")
    logger.info("=" * 80)
    
    try:
        logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ Google Sheets...")
        events = google_sheets_service.get_events()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events) if events else 0}")
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        # (–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
        log_success(logger, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", error=e)


async def scheduled_bulk_newsletter():
    """
    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
    """
    logger.info("=" * 80)
    logger.info("üì∞ –ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò –ù–û–í–û–°–¢–ï–ô")
    logger.info("=" * 80)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...")
        users = google_sheets_service.get_all_users()
        recipients = [user.get('Email') for user in users if user.get('Email')]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email: {len(recipients)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if settings.gmail_user and settings.gmail_user not in recipients:
            recipients.append(settings.gmail_user)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {settings.gmail_user}")
        
        if not recipients:
            log_warning(logger, "–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –¢–µ–º–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        subject = "üì¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏"
        body = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç "–û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏"!

üéØ –í —ç—Ç–æ–º –≤—ã–ø—É—Å–∫–µ:
‚Ä¢ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –ú–°–ü
‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–µ–º–∏–Ω–∞—Ä—ã
‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π

üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
–ù–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å:
- –°–æ–∑–¥–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫
- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
- –ê–Ω–∞–ª–∏–∑–æ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ú–°–ü

üåê –î–æ—Å—Ç—É–ø –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:
http://localhost:8000/static/main-interface.html

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ "–û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏"

---
–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —ç—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è".
"""
        
        logger.info(f"üì¨ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º...")
        logger.debug("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: 2 —Å–µ–∫—É–Ω–¥—ã")
        
        sent_count = gmail_service.send_bulk_email_with_delay(
            recipients=recipients,
            subject=subject,
            body=body,
            html=False,
            delay_seconds=2  # 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        )
        
        log_success(logger, "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                   sent=sent_count, total=len(recipients), 
                   success_rate=f"{(sent_count/len(recipients)*100):.1f}%")
        
    except Exception as e:
        log_error(logger, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ", error=e)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # ==================== STARTUP ====================
    logger.info("=" * 80)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø AI –ê–°–°–ò–°–¢–ï–ù–¢ –û–ü–û–†–ê –†–û–°–°–ò–ò")
    logger.info("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    directories = ["reports", "generated_documents", "templates/documents", "logs"]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.debug(f"  ‚úì {directory}")
    log_success(logger, "–í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    
    scheduler.add_job(
        scheduled_legislation_check,
        CronTrigger(hour=9, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        id="legislation_check"
    )
    logger.debug("  ‚úì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00")
    
    scheduler.add_job(
        scheduled_event_reminders,
        CronTrigger(hour=10, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
        id="event_reminders"
    )
    logger.debug("  ‚úì –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00")
    
    scheduler.add_job(
        scheduled_bulk_newsletter,
        CronTrigger(hour=11, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00
        id="bulk_newsletter"
    )
    logger.debug("  ‚úì –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 11:00")
    
    scheduler.start()
    log_success(logger, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    logger.info("=" * 80)
    logger.info("‚úÖ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–û –ò –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï")
    logger.info(f"üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://{settings.host}:{settings.port}")
    logger.info(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{settings.host}:{settings.port}/docs")
    logger.info("=" * 80)
    
    yield
    
    # ==================== SHUTDOWN ====================
    logger.info("=" * 80)
    logger.info("üõë –û–°–¢–ê–ù–û–í–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    logger.info("=" * 80)
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    scheduler.shutdown()
    log_success(logger, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    logger.info("=" * 80)


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏",
    description="–£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ú–°–ü",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
from fastapi import Request
import time

@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    request_id = id(request)
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info("=" * 80)
    logger.info(f"üì• HTTP REQUEST [{request_id}]")
    logger.info(f"   Method: {request.method}")
    logger.info(f"   URL: {request.url.path}")
    if request.query_params:
        logger.info(f"   Query: {dict(request.query_params)}")
    logger.info(f"   Client: {request.client.host if request.client else 'Unknown'}")
    logger.info("=" * 80)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
        logger.info("=" * 80)
        logger.info(f"{status_emoji} HTTP RESPONSE [{request_id}]")
        logger.info(f"   Status: {response.status_code}")
        logger.info(f"   Time: {process_time:.3f}s")
        logger.info("=" * 80)
        
        return response
        
    except Exception as e:
        process_time = time.time() - start_time
        log_error(logger, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ [{request_id}]", 
                 error=e, url=str(request.url), time=f"{process_time:.3f}s")
        raise

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(chat.router)
app.include_router(applications.router)
app.include_router(reports.router)
app.include_router(documents.router)
app.include_router(feedback.router)
app.include_router(analysis.router)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è —á–∞—Ç-–≤–∏–¥–∂–µ—Ç–∞)
if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")


@app.get("/")
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    """
    logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É")
    response = {
        "message": "AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }
    logger.debug(f"–û—Ç–≤–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {response}")
    return response


@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (health check)")
    is_healthy = scheduler.running
    
    response = {
        "status": "healthy" if is_healthy else "unhealthy",
        "scheduler": is_healthy
    }
    
    if is_healthy:
        logger.debug("‚úÖ Health check: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ")
    else:
        log_warning(logger, "‚ö†Ô∏è Health check: –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    return response


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )

