"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
import asyncio
import time
import gc
from typing import Dict, List, Optional
from functools import lru_cache
from logger_config import get_logger, log_success, log_error, log_warning

logger = get_logger(__name__)


class PerformanceOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.request_queue = asyncio.Queue(maxsize=100)
        self.batch_size = 5
        self.batch_timeout = 0.5  # 500ms
        self.processing_tasks = set()
        self.is_running = False
    
    async def start_batch_processor(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.is_running:
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
        task = asyncio.create_task(self._process_batches())
        self.processing_tasks.add(task)
        task.add_done_callback(self.processing_tasks.discard)
    
    async def stop_batch_processor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if self.processing_tasks:
            await asyncio.gather(*self.processing_tasks, return_exceptions=True)
    
    async def _process_batches(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        batch = []
        last_batch_time = time.time()
        
        while self.is_running:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    request = await asyncio.wait_for(
                        self.request_queue.get(), 
                        timeout=self.batch_timeout
                    )
                    batch.append(request)
                except asyncio.TimeoutError:
                    # –¢–∞–π–º–∞—É—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
                    pass
                
                current_time = time.time()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –µ—Å–ª–∏:
                # 1. –ü–∞–∫–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω
                # 2. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                # 3. –ï—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–∞–∫–µ—Ç–µ
                if (len(batch) >= self.batch_size or 
                    (current_time - last_batch_time >= self.batch_timeout and batch)):
                    
                    if batch:
                        await self._process_batch(batch)
                        batch = []
                        last_batch_time = current_time
                
            except Exception as e:
                log_error(logger, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –ø–∞–∫–µ—Ç–æ–≤", error=e)
                await asyncio.sleep(0.1)
    
    async def _process_batch(self, batch: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(batch)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for request in batch:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
                await self._handle_request(request)
            
            log_success(logger, f"–ü–∞–∫–µ—Ç –∏–∑ {len(batch)} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞", error=e)
    
    async def _handle_request(self, request: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
        pass
    
    async def queue_request(self, request: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            await self.request_queue.put(request)
        except asyncio.QueueFull:
            log_warning(logger, "–û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
    
    @lru_cache(maxsize=1000)
    def cached_response(self, message_hash: str) -> Optional[str]:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å LRU –∫—ç—à–µ–º"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏
        return None
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cached_response.cache_clear()
        logger.info("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")
    
    def optimize_memory(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        logger.debug(f"üßπ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        if hasattr(gc, 'set_threshold'):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
            gc.set_threshold(700, 10, 10)
    
    def get_system_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        
        return {
            "cpu_percent": process.cpu_percent(),
            "memory_mb": process.memory_info().rss / 1024 / 1024,
            "memory_percent": process.memory_percent(),
            "open_files": len(process.open_files()),
            "threads": process.num_threads(),
            "queue_size": self.request_queue.qsize(),
            "active_tasks": len(self.processing_tasks)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
performance_optimizer = PerformanceOptimizer()
