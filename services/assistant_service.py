"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
"""
from typing import Dict, List, Optional
from datetime import datetime
from models.schemas import ChatMessage, ChatResponse, UserData
from integrations import openai_service, google_sheets_service
from services.document_service import document_service
from logger_config import get_logger, log_success, log_error, log_warning

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
_autofill_sessions = {}

class AssistantService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.conversations = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        self.autofill_sessions = _autofill_sessions  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    
    def process_message(self, user_id: str, message: str) -> ChatResponse:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        """
        logger.info("=" * 80)
        logger.info("ü§ñ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø")
        logger.info(f"   User ID: {user_id}")
        logger.info(f"   Message: {message[:100]}{'...' if len(message) > 100 else ''}")
        logger.info("=" * 80)
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        if user_id not in self.conversations:
            self.conversations[user_id] = []
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        else:
            logger.debug(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–∏—Å—Ç–æ—Ä–∏—è: {len(self.conversations[user_id])} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        conversation_history = self.conversations[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        try:
            logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI/DeepSeek API...")
            if ("–∞–Ω–∞–ª–∏–∑ –º—Å–ø" in message.lower() or "–ø—Ä–æ–≥–Ω–æ–∑ –º—Å–ø" in message.lower() or 
                "–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞" in message.lower() or "–ø—Ä–æ–≥–Ω–æ–∑ —Ä—ã–Ω–∫–∞" in message.lower()):
                logger.info("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ú–°–ü")
                response_text = openai_service.analyze_sme_trends(message)
                action = "analysis"
            else:
                # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ + –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
                response_text = openai_service.chat(message, conversation_history)
                action = "chat"
            
            print(f"[SUCCESS] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI (–¥–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {response_text[:100]}...")
            
            if not response_text or len(response_text.strip()) == 0:
                print(f"[WARNING] AI –≤–µ—Ä–Ω—É–ª –ü–£–°–¢–û–ô –æ—Ç–≤–µ—Ç!")
                response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API."
                
        except Exception as e:
            print(f"[ERROR] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê OpenAI/DeepSeek API: {e}")
            import traceback
            traceback.print_exc()
            response_text = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            action = "error"
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        conversation_history.append({"role": "user", "content": message})
        conversation_history.append({"role": "assistant", "content": response_text})
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets
        google_sheets_service.save_chat_history(user_id, message, response_text)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∏–∑–Ω–µ—Å-–Ω–∞–º–µ—Ä–µ–Ω–∏—è
        self._extract_and_save_user_data(user_id, conversation_history)
        self._detect_intent_and_persist(user_id, conversation_history)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∞–ª–æ–±–æ–π
        self._check_and_save_complaint(user_id, message, conversation_history)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
        print(f"\n{'='*60}")
        print(f"–ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê")
        print(f"User ID: {user_id}")
        print(f"Message: {message[:100]}...")
        print(f"Response: {response_text[:100]}...")
        print(f"{'='*60}\n")
        
        try:
            document_suggestion = self._check_document_creation(user_id, message, response_text, conversation_history)
        except Exception as e:
            print(f"[ERROR] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ _check_document_creation: {e}")
            import traceback
            traceback.print_exc()
            document_suggestion = None
        
        print(f"\n{'='*60}")
        print(f"[RESULT] document_suggestion:")
        if document_suggestion:
            print(f"   [+] document_suggestion —Å–æ–∑–¥–∞–Ω")
            print(f"   - suggested: {document_suggestion.get('suggested')}")
            print(f"   - created_document exists: {document_suggestion.get('created_document') is not None}")
            if document_suggestion.get('created_document'):
                print(f"   - created_document.status: {document_suggestion.get('created_document', {}).get('status')}")
                print(f"   - created_document.filepath: {document_suggestion.get('created_document', {}).get('filepath')}")
                print(f"   - created_document.download_url: {document_suggestion.get('created_document', {}).get('download_url')}")
            print(f"   - needs_data: {document_suggestion.get('needs_data')}")
            print(f"   - message exists: {document_suggestion.get('message') is not None}")
        else:
            print(f"   [-] document_suggestion = None (–Ω–µ —Å–æ–∑–¥–∞–Ω)")
        print(f"{'='*60}\n")
        
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–¥–∞–µ–º document_suggestion –≤ ChatResponse
        if document_suggestion and document_suggestion.get("created_document"):
            created_doc = document_suggestion["created_document"]
            print(f"[PROCESSING] created_document:")
            print(f"   Status: {created_doc.get('status')}")
            if created_doc.get("status") == "success":
                print(f"   [OK] –°—Ç–∞—Ç—É—Å success, –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —á–µ—Ä–µ–∑ document_suggestion")
                print(f"   Download URL: {created_doc.get('download_url')}")
                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ response_text - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç document_suggestion
            else:
                print(f"   [ERROR] –°—Ç–∞—Ç—É—Å –Ω–µ success: {created_doc.get('status')}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                response_text += f"\n\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {created_doc.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        print(f"\n{'='*80}")
        print(f"[SENDING] –û–¢–í–ï–¢ –ö–õ–ò–ï–ù–¢–£:")
        print(f"   Response length: {len(response_text)}")
        print(f"   Action: {action}")
        print(f"   Document suggestion: {document_suggestion is not None}")
        print(f"   Response preview: {response_text[:150]}...")
        print(f"{'='*80}\n")
        
        return ChatResponse(
            response=response_text,
            action=action,
            document_suggestion=document_suggestion
        )
    
    def _extract_and_save_user_data(self, user_id: str, 
                                   conversation: List[Dict]):
        """
        –ò–∑–≤–ª–µ—á—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_text = "\n".join(
            [f"{msg['role']}: {msg['content']}" for msg in conversation[-10:]]
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_info = openai_service.extract_user_info(conversation_text)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if user_info and any(user_info.values()):
            user_info['user_id'] = user_id
            google_sheets_service.save_user_data(user_info)

    def _detect_intent_and_persist(self, user_id: str, conversation: List[Dict]):
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (–∑–∞—è–≤–∫–∞/–¥–æ–∫—É–º–µ–Ω—Ç/–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        """
        conversation_text = "\n".join(
            [f"{msg['role']}: {msg['content']}" for msg in conversation[-12:]]
        )
        intent_result = openai_service.detect_intent_and_extract(conversation_text) or {}

        intent = intent_result.get("intent")
        if not intent or intent == "none":
            return

        if intent == "application":
            application = intent_result.get("application") or {}
            if any(application.values()):
                # –î–æ–ø–æ–ª–Ω—è–µ–º user_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞—è–≤–∫—É
                payload = {
                    "user_id": user_id,
                    "full_name": application.get("full_name") or "",
                    "email": application.get("email") or "",
                    "phone": application.get("phone") or "",
                    "organization": application.get("organization") or "",
                    "inn": application.get("inn") or "",
                    "business_type": application.get("business_type") or "",
                    "comment": application.get("comment") or ""
                }
                try:
                    google_sheets_service.save_application(payload)
                except Exception:
                    pass

        elif intent == "document":
            doc = intent_result.get("document") or {}
            template_type = doc.get("template_type")
            user_data = doc.get("user_data") or {}
            if template_type in {"complaint", "protocol", "contract"}:
                # –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ document_service API, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user_data = dict(user_data)
                    user_data["user_id"] = user_id
                    google_sheets_service.save_user_data(user_data)
                except Exception:
                    pass

        elif intent == "feedback":
            fb = intent_result.get("feedback") or {}
            if fb.get("message"):
                try:
                    google_sheets_service.save_feedback({
                        "user_id": user_id,
                        "message": fb.get("message"),
                        "category": fb.get("category") or "question"
                    })
                except Exception:
                    pass
    
    def _check_document_creation(self, user_id: str, message: str, 
                                 response: str, conversation: List[Dict]) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        (–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ü–µ–Ω–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            conversation: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Returns:
            –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ None
        """
        print(f"\n{'='*80}")
        print(f"[CHECK DOC CREATION] _check_document_creation() –≤—ã–∑–≤–∞–Ω–∞")
        print(f"   User ID: {user_id}")
        print(f"   Message preview: {message[:100]}...")
        print(f"   Response preview: {response[:100]}...")
        print(f"{'='*80}\n")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            templates = document_service.get_templates_list()
            print(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            if templates:
                for t in templates:
                    print(f"   - {t.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {t.get('template_id', 'N/A')[:8]}...)")
            
            if not templates:
                print(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤, –≤—ã—Ö–æ–¥")
                return None
            
            # üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä—è–º–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            message_lower = message.lower()
            emergency_trigger = (
                # –ó–∞–ø—Ä–æ—Å "–ó–∞–ø–æ–ª–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç –†–æ—Å—Å–∏—è" —Å –¥–∞–Ω–Ω—ã–º–∏
                (("–∑–∞–ø–æ–ª–Ω–∏" in message_lower or "–∑–∞–ø–æ–ª–Ω–∏—Ç–µ" in message_lower) and
                "–¥–æ–∫—É–º–µ–Ω—Ç" in message_lower and
                "—Ä–æ—Å—Å–∏—è" in message_lower and
                (":" in message or "=" in message)) or
                
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –û–ø–æ—Ä—É –†–æ—Å—Å–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                (("–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" in message_lower or "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" in message_lower) and
                ("–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower or "–æ–ø–æ—Ä—É" in message_lower) and
                ("–æ–æ–æ" in message_lower or "–æ–±—â–µ—Å—Ç–≤–æ" in message_lower or "–∏–Ω–Ω" in message_lower or "–æ–≥—Ä–Ω" in message_lower)) or
                
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
                (("–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_lower or "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_lower) and
                ("–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower or "–æ–ø–æ—Ä—É" in message_lower)) or
                
                # –ó–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –§–ò–û (–¥–∞–∂–µ –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–π)
                (("–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_lower or "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_lower) and
                ("–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower or "–æ–ø–æ—Ä—É" in message_lower) and
                ("–∑–æ–≤—É—Ç" in message_lower or "—Ñ–∞–º–∏–ª–∏—è" in message_lower or "–∏–º—è" in message_lower)) or
                
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                ("–∂–∞–ª–æ–±" in message_lower and
                ("—Ñ–∏–æ" in message_lower or "—Ç–µ–ª–µ—Ñ–æ–Ω" in message_lower or "email" in message_lower or "–∞–¥—Ä–µ—Å–∞—Ç" in message_lower or "—Å—É—Ç—å" in message_lower or "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" in message_lower or "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in message_lower))
            )
            
            if emergency_trigger:
                print(f"\n{'='*60}")
                print(f"[EMERGENCY MODE] ACTIVATED!")
                print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏")
                print(f"   –û–ë–•–û–î –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ AI - —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û")
                print(f"{'='*60}\n")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
                is_organization_request = (
                    ("–æ–æ–æ" in message_lower or "–æ–±—â–µ—Å—Ç–≤–æ" in message_lower or "–∏–Ω–Ω" in message_lower or "–æ–≥—Ä–Ω" in message_lower) or
                    ("–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" in message_lower and "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower) or
                    ("–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower) or
                    ("–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_lower and "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower) or
                    ("–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower)
                )
                
                is_individual_request = (
                    ("–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ" in message_lower and "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower and 
                     ("–∑–æ–≤—É—Ç" in message_lower or "—Ñ–∞–º–∏–ª–∏—è" in message_lower or "–∏–º—è" in message_lower)) or
                    ("–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in message_lower and 
                     ("–∑–æ–≤—É—Ç" in message_lower or "—Ñ–∞–º–∏–ª–∏—è" in message_lower or "–∏–º—è" in message_lower))
                )
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "–¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ—Å—Å–∏—è"
                is_russia_document_request = (
                    "–¥–æ–∫—É–º–µ–Ω—Ç" in message_lower and "—Ä–æ—Å—Å–∏—è" in message_lower
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã
                is_complaint_request = (
                    "–∂–∞–ª–æ–±" in message_lower and
                    ("—Ñ–∏–æ" in message_lower or "—Ç–µ–ª–µ—Ñ–æ–Ω" in message_lower or "email" in message_lower or "–∞–¥—Ä–µ—Å–∞—Ç" in message_lower or "—Å—É—Ç—å" in message_lower or "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" in message_lower or "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in message_lower)
                )
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
                selected_template = None
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –∂–∞–ª–æ–±–∞ - —Å–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É –±–µ–∑ —à–∞–±–ª–æ–Ω–∞
                if is_complaint_request:
                    print(f"[OK] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
                    # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ document_service
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∂–∞–ª–æ–±—ã
                        import re
                        complaint_data = {"user_id": user_id}
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û
                        fio_match = re.search(r'–§–ò–û[:\s]+([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)', message, re.IGNORECASE)
                        if fio_match:
                            complaint_data['full_name'] = fio_match.group(1)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                        phone_match = re.search(r'–¢–µ–ª–µ—Ñ–æ–Ω[:\s]+(\+?[0-9\s\(\)\-]+)', message, re.IGNORECASE)
                        if phone_match:
                            complaint_data['phone'] = phone_match.group(1)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º email
                        email_match = re.search(r'E-mail[:\s]+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})', message, re.IGNORECASE)
                        if email_match:
                            complaint_data['email'] = email_match.group(1)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞—Ç–∞
                        addressee_match = re.search(r'–ê–¥—Ä–µ—Å–∞—Ç –∂–∞–ª–æ–±—ã[:\s]+([^:]+?)(?=\s+–°—É—Ç—å –∂–∞–ª–æ–±—ã)', message, re.IGNORECASE | re.DOTALL)
                        if addressee_match:
                            complaint_data['addressee'] = addressee_match.group(1).strip()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—Ç—å –∂–∞–ª–æ–±—ã
                        complaint_match = re.search(r'–°—É—Ç—å –∂–∞–ª–æ–±—ã[:\s]+([^:]+?)(?=\s+–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è)', message, re.IGNORECASE | re.DOTALL)
                        if complaint_match:
                            complaint_data['complaint_text'] = complaint_match.group(1).strip()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                        requirements_match = re.search(r'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è[:\s]+([^:]+?)(?=\s+–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è)', message, re.IGNORECASE | re.DOTALL)
                        if requirements_match:
                            complaint_data['requirements'] = requirements_match.group(1).strip()
                        
                        # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
                        filepath = document_service.fill_complaint_template(complaint_data)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
                        google_sheets_service.save_complaint({
                            "complaint_id": f"COMP_{user_id}_{int(datetime.now().timestamp())}",
                            "user_id": user_id,
                            "full_name": complaint_data.get('full_name', ''),
                            "email": complaint_data.get('email', ''),
                            "phone": complaint_data.get('phone', ''),
                            "organization": complaint_data.get('organization', ''),
                            "complaint_text": complaint_data.get('complaint_text', ''),
                            "category": "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞",
                            "priority": "–°—Ä–µ–¥–Ω–∏–π"
                        })
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        return {
                            "suggested": True,
                            "created_document": {
                                "status": "success",
                                "filepath": filepath,
                                "download_url": f"/api/documents/download?file={filepath}",
                                "template_name": "–ñ–∞–ª–æ–±–∞",
                                "message": f" –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
                            },
                            "needs_data": False,
                            "message": f"**–ñ–∞–ª–æ–±–∞ –≥–æ—Ç–æ–≤–∞!**\n\n**–î–æ–∫—É–º–µ–Ω—Ç:** –ñ–∞–ª–æ–±–∞\n**–§–∞–π–ª:** {filepath.split('/')[-1]}\n\n**–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.**"
                        }
                        
                    except Exception as e:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")
                        import traceback
                        traceback.print_exc()
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ï—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω "–¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ—Å—Å–∏—è" - –∏—â–µ–º –∏–º–µ–Ω–Ω–æ –µ–≥–æ
                elif is_russia_document_request:
                    for template in templates:
                        template_name_lower = template.get('name', '').lower()
                        if "–¥–æ–∫—É–º–µ–Ω—Ç" in template_name_lower and "—Ä–æ—Å—Å–∏—è" in template_name_lower:
                            selected_template = template
                            print(f"[OK] –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω '–î–æ–∫—É–º–µ–Ω—Ç –†–æ—Å—Å–∏—è': {template['name']}")
                            break
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏—â–µ–º —à–∞–±–ª–æ–Ω —Å "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" (–∑–∞—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–Ω–∫–µ—Ç–∞)
                elif is_organization_request:
                    for template in templates:
                        template_name_lower = template.get('name', '').lower()
                        if "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" in template_name_lower:
                            selected_template = template
                            print(f"[OK] –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {template['name']}")
                            break
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü –∏—â–µ–º "–î–æ–∫—É–º–µ–Ω—Ç –†–æ—Å—Å–∏—è"
                elif is_individual_request:
                    for template in templates:
                        template_name_lower = template.get('name', '').lower()
                        if "–¥–æ–∫—É–º–µ–Ω—Ç" in template_name_lower and "—Ä–æ—Å—Å–∏—è" in template_name_lower:
                            selected_template = template
                            print(f"[OK] –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞: {template['name']}")
                            break
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: Fallback - –∏—â–µ–º –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
                if not selected_template:
                    for template in templates:
                        template_name_lower = template.get('name', '').lower()
                        if "—Ä–æ—Å—Å–∏—è" in template_name_lower:
                            selected_template = template
                            print(f"[OK] –ù–∞–π–¥–µ–Ω fallback —à–∞–±–ª–æ–Ω: {template['name']}")
                            break
                
                if selected_template:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    import re
                    user_info = {"user_id": user_id}
                    
                    # –£–õ–£–ß–®–ï–ù–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –í–°–Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ò–ó–í–ï–°–¢–ù–û–ì–û –ø–æ–ª—è
                    field_patterns = {
                        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è - –∫–æ—Ä–æ—Ç–∫–∏–µ
                        'last_name': r'(?:–§–∞–º–∏–ª–∏—è|—Ñ–∞–º–∏–ª–∏—è)[\s:=]+([–ê-–Ø–Å][–∞-—è—ë]+)',
                        'first_name': r'(?:–ò–º—è|–∏–º—è)[\s:=]+([–ê-–Ø–Å–∞-—è—ë]+)',
                        'middle_name': r'(?:–û—Ç—á–µ—Å—Ç–≤–æ|–æ—Ç—á–µ—Å—Ç–≤–æ)[\s:=]+([–ê-–Ø–Å][–∞-—è—ë]+)',
                        
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ñ—Ä–∞–∑—ã "–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ–≤ —Ñ–∞–º–∏–ª–∏—è –ë–∞–ª–∞–∫–∏–Ω –æ—Ç—á–µ—Å—Ç–≤–æ –ú–∏—Ö–∞–π–ª–æ–≤–∏—á"
                        'first_name_alt': r'(?:–∑–æ–≤—É—Ç|–∏–º—è)\s+([–ê-–Ø–Å–∞-—è—ë]+)(?=\s+(?:—Ñ–∞–º–∏–ª–∏—è|–æ—Ç—á–µ—Å—Ç–≤–æ|$))',
                        'last_name_alt': r'(?:—Ñ–∞–º–∏–ª–∏—è)\s+([–ê-–Ø–Å][–∞-—è—ë]+)(?=\s+(?:–æ—Ç—á–µ—Å—Ç–≤–æ|$))',
                        'middle_name_alt': r'(?:–æ—Ç—á–µ—Å—Ç–≤–æ)\s+([–ê-–Ø–Å][–∞-—è—ë]+)',
                        
                        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ—Ä–∞–∑—ã "–º–æ–µ –§–ò–û –ë–∞–ª–∞–∫–∏–Ω –õ–µ–≤ –ú–∏—Ö–∞–π–ª–æ–≤–∏—á"
                        'fio_direct': r'(?:–º–æ–µ\s+–§–ò–û|–§–ò–û|—Ñ–∏–æ)[\s:=]+([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)',
                        'inn': r'(?:–ò–ù–ù|–∏–Ω–Ω)[\s:=]+(\d{10,12})',
                        'phone': r'(?:–¢–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª–µ—Ñ–æ–Ω)[\s:=]+(\+?[0-9\s\(\)\-]+)',
                        'email': r'(?:E-mail|email|E-mail|–ø–æ—á—Ç–∞)[\s:=]+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
                        
                        # –ü–æ–ª—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
                        'organization': r'(?:–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞|–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)[\s:=]+([^:]+?)(?=\s+(?:–û–ì–†–ù|–ò–ù–ù|–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å))',
                        'ogrn': r'(?:–û–ì–†–ù|–æ–≥—Ä–Ω)[\s:=]+(\d{13,15})',
                        'legal_address': r'(?:–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å|—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å)[\s:=]+([^:]+?)(?=\s+(?:–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å|–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏))',
                        'actual_address': r'(?:–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å|—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å)[\s:=]+([^:]+?)(?=\s+(?:–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ))',
                        'okved': r'(?:–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|–û–ö–í–≠–î)[\s:=]+([^:]+?)(?=\s+(?:–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ|–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è))',
                        'director_name': r'(?:–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è|—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)[\s:=]+([^:]+?)(?=\s+(?:–î–æ–ª–∂–Ω–æ—Å—Ç—å|–¢–µ–ª–µ—Ñ–æ–Ω))',
                        'position': r'(?:–î–æ–ª–∂–Ω–æ—Å—Ç—å|–¥–æ–ª–∂–Ω–æ—Å—Ç—å)[\s:=]+([^:]+?)(?=\s+(?:–¢–µ–ª–µ—Ñ–æ–Ω|–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞))',
                        'employees_count': r'(?:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)[\s:=]+([^:]+?)(?=\s+(?:–ì–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç|–†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏))',
                        'annual_turnover': r'(?:–ì–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç|–æ–±–æ—Ä–æ—Ç)[\s:=]+([^:]+?)(?=\s+(?:–†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|$))',
                        'activity_region': r'(?:–†–µ–≥–∏–æ–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|—Ä–µ–≥–∏–æ–Ω)[\s:=]+([^:]+?)(?=\s*$)',
                        
                        # –î–ª–∏–Ω–Ω—ã–µ –ø–æ–ª—è - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –í–°–Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                        'birth_date': r'(?:–ß–∏—Å–ª–æ[,\s]*–º–µ—Å—è—Ü[,\s]*–≥–æ–¥\s+—Ä–æ–∂–¥–µ–Ω–∏—è|–¥–∞—Ç–∞\s+—Ä–æ–∂–¥–µ–Ω–∏—è)[\s:=]+(.+?)(?=\s+(?:–ê–¥—Ä–µ—Å|–¢–µ–ª–µ—Ñ–æ–Ω|E-mail|–ü–∞—Å–ø–æ—Ä—Ç|–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|–ú–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã)|$)',
                        'region': r'(?:–†–µ–≥–∏–æ–Ω|—Ä–µ–≥–∏–æ–Ω)[\s:=]+([–ê-–Ø–Å–∞-—è—ë\s\-]+?)(?=\s+(?:–ì–æ—Ä–æ–¥|–≥–æ—Ä–æ–¥))',
                        'city': r'(?:–ì–æ—Ä–æ–¥|–≥–æ—Ä–æ–¥)[\s:=]+([–ê-–Ø–Å–∞-—è—ë\-\s]+?)(?=\s+(?:–£–ª–∏—Ü–∞|—É–ª–∏—Ü–∞))',
                        'street': r'(?:–£–ª–∏—Ü–∞|—É–ª–∏—Ü–∞)[\s:=]+([–ê-–Ø–Å–∞-—è—ë\s\-]+?)(?=\s+(?:–î–æ–º|–¥–æ–º))',
                        'house': r'(?:–î–æ–º|–¥–æ–º)[\s:=]+(\d+[–∞-—è–ê-–Øa-zA-Z]*)',
                        'apartment': r'(?:–ö–≤\.?|–∫–≤–∞—Ä—Ç–∏—Ä–∞)[\s:=]+(\d+)',
                        
                        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–ª—è - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è
                        'passport': r'(?:–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ\s+–¥–∞–Ω–Ω—ã–µ|–ø–∞—Å–ø–æ—Ä—Ç)[\s:=]+(.+?)(?=\s+(?:–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ):)',
                        'education': r'(?:–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)[\s:=]+(.+?)(?=\s+(?:–ú–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã|–º–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã),)',
                        'work_info': r'(?:–ú–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã[,\s]*–¥–æ–ª–∂–Ω–æ—Å—Ç—å|—Ä–∞–±–æ—Ç–∞)[\s:=]+(.+?)(?=\s+(?:–°—Ñ–µ—Ä–∞\s+–±–∏–∑–Ω–µ—Å–∞|—Å—Ñ–µ—Ä–∞\s+–±–∏–∑–Ω–µ—Å–∞))',
                        'activity_sphere': r'(?:–°—Ñ–µ—Ä–∞\s+–±–∏–∑–Ω–µ—Å–∞[^:]*:|—Å—Ñ–µ—Ä–∞[^:]*:)[\s:=]+(.+?)(?=\s+(?:–û–ø—ã—Ç\s+–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π|–æ–ø—ã—Ç\s+–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π))',
                        'business_experience': r'(?:–û–ø—ã—Ç\s+–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π\s+–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|–æ–ø—ã—Ç\s+–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π\s+–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)[\s:=]+(.+?)(?=\s+(?:–û–ø—ã—Ç\s+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π|–æ–ø—ã—Ç\s+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π))',
                        'public_activity_experience': r'(?:–û–ø—ã—Ç\s+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π\s+–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|–æ–ø—ã—Ç\s+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π\s+–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)[\s:=]+(.+?)(?=\s+(?:–≠–∫—Å–ø–µ—Ä—Ç\s+–≤\s+–æ—Ç—Ä–∞—Å–ª–∏|—ç–∫—Å–ø–µ—Ä—Ç\s+–≤\s+–æ—Ç—Ä–∞—Å–ª–∏):)',
                        'expertise_area': r'(?:–≠–∫—Å–ø–µ—Ä—Ç\s+–≤\s+–æ—Ç—Ä–∞—Å–ª–∏|—ç–∫—Å–ø–µ—Ä—Ç\s+–≤\s+–æ—Ç—Ä–∞—Å–ª–∏)[\s:=]+(.+?)(?=\s+(?:–í—ã–±–æ—Ä–Ω—ã–µ\s+–¥–æ–ª–∂–Ω–æ—Å—Ç–∏|–≤—ã–±–æ—Ä–Ω—ã–µ\s+–¥–æ–ª–∂–Ω–æ—Å—Ç–∏):)',
                        'elected_position': r'(?:–í—ã–±–æ—Ä–Ω—ã–µ\s+–¥–æ–ª–∂–Ω–æ—Å—Ç–∏|–≤—ã–±–æ—Ä–Ω—ã–µ\s+–¥–æ–ª–∂–Ω–æ—Å—Ç–∏)[\s:=]+(.+?)(?=\s+(?:–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è|–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è):)',
                        'additional_info': r'(?:–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è|–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)[\s:=]+(.+?)(?=\s+(?:–î–∞—Ç–∞\s+–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è|–¥–∞—Ç–∞\s+–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è):)',
                    }
                    
                    for field_name, pattern in field_patterns.items():
                        # DOTALL –ø–æ–∑–≤–æ–ª—è–µ—Ç .+? –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                        match = re.search(pattern, message, re.IGNORECASE | re.DOTALL)
                        if match:
                            value = match.group(1).strip()
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ
                            value = value.rstrip('.,;:')
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                            value = ' '.join(value.split())
                            user_info[field_name] = value
                            print(f"   [OK] {field_name}: {value[:80]}...", flush=True)
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –§–ò–û (–æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –§–ò–û
                    if user_info.get('fio_direct'):
                        user_info['fio'] = user_info['fio_direct']
                        user_info['full_name'] = user_info['fio_direct']
                        print(f"   [OK] fio (–ø—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ): {user_info['fio']}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –§–ò–û, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ —á–∞—Å—Ç–µ–π
                        first_name = user_info.get('first_name') or user_info.get('first_name_alt')
                        last_name = user_info.get('last_name') or user_info.get('last_name_alt')
                        middle_name = user_info.get('middle_name') or user_info.get('middle_name_alt')
                        
                        if last_name or first_name:
                            parts = []
                            if last_name: parts.append(last_name)
                            if first_name: parts.append(first_name)
                            if middle_name: parts.append(middle_name)
                            user_info['full_name'] = ' '.join(parts)
                            user_info['fio'] = user_info['full_name']  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ fio –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
                            print(f"   [OK] full_name (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ): {user_info['full_name']}")
                            print(f"   [OK] fio (–¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤): {user_info['fio']}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        if not user_info.get('first_name') and first_name:
                            user_info['first_name'] = first_name
                        if not user_info.get('last_name') and last_name:
                            user_info['last_name'] = last_name
                        if not user_info.get('middle_name') and middle_name:
                            user_info['middle_name'] = middle_name
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–¥—Ä–µ—Å
                    if user_info.get('region') or user_info.get('city'):
                        address_parts = []
                        if user_info.get('region'): address_parts.append(user_info['region'])
                        if user_info.get('city'): address_parts.append(f"–≥. {user_info['city']}")
                        if user_info.get('street'): address_parts.append(f"—É–ª. {user_info['street']}")
                        if user_info.get('house'):
                            house_str = f"–¥. {user_info['house']}"
                            if user_info.get('apartment'):
                                house_str += f", –∫–≤. {user_info['apartment']}"
                            address_parts.append(house_str)
                        user_info['address'] = ', '.join(address_parts)
                        print(f"   [OK] address (–æ–±—ä–µ–¥–∏–Ω–µ–Ω): {user_info['address'][:70]}...")
                    
                    # –°–û–ó–î–ê–ï–ú –î–û–ö–£–ú–ï–ù–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û
                    print(f"\n[CREATING] –î–û–ö–£–ú–ï–ù–¢ –í –ê–í–ê–†–ò–ô–ù–û–ú –†–ï–ñ–ò–ú–ï...")
                    try:
                        created_document = self.create_document_from_template(
                            user_id=user_id,
                            template_id=selected_template['template_id'],
                            user_data=user_info,
                            conversation_data={
                                "message": message,
                                "response": response
                            },
                            send_email=True
                        )
                        
                        if created_document and created_document.get("status") == "success":
                            print(f"[OK] –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                            print(f"   Filepath: {created_document.get('filepath')}")
                            print(f"   Download URL: {created_document.get('download_url')}")
                            
                            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í GOOGLE SHEETS
                            print(f"\n[GOOGLE SHEETS] –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É...", flush=True)
                            try:
                                google_sheets_service.save_document({
                                    "user_id": user_id,
                                    "full_name": user_info.get("full_name", ""),
                                    "email": user_info.get("email", ""),
                                    "document_type": "–∞–Ω–∫–µ—Ç–∞",  # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –†–æ—Å—Å–∏—è
                                    "template_name": selected_template['name'],
                                    "filepath": created_document.get("filepath", ""),
                                    "download_url": created_document.get("download_url", ""),
                                    "completeness_score": 100,  # –í –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ
                                    "confidence_score": 100,
                                    "data_quality": "excellent"
                                })
                                print(f"   [OK] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets!", flush=True)
                            except Exception as e:
                                print(f"   [WARNING] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}", flush=True)
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            return {
                                "suggested": True,
                                "created_document": created_document,
                                "needs_data": False,
                                "message": f"""**–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

**–®–∞–±–ª–æ–Ω:** {selected_template['name']}
**–§–∞–π–ª:** {created_document.get('filepath', '').split('/')[-1]}

**–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.**"""
                            }
                        else:
                            print(f"[ERROR] –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
                            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {created_document}")
                    except Exception as e:
                        print(f"[ERROR] –û–®–ò–ë–ö–ê –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
                        import traceback
                        traceback.print_exc()
                else:
                    print(f"[ERROR] –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –ü–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
            conversation_text = "\n".join(
                [f"{msg['role']}: {msg['content']}" for msg in conversation[-5:]]
            )
            
            # –°–¢–†–û–ì–ò–ô –°–ü–ò–°–û–ö: —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –î–ï–ô–°–¢–í–ò–ï —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            document_keywords = [
                "—Å–æ–∑–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç", "—Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", "—Å–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç",
                "–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É", "–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É",
                "–æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ",
                "–ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                "–Ω—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç", "–Ω—É–∂–Ω–∞ –∞–Ω–∫–µ—Ç–∞", "–Ω—É–∂–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ",
                "—Ö–æ—á—É –≤—Å—Ç—É–ø–∏—Ç—å", "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤",
                "–ø–æ–º–æ–≥–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å", "–ø–æ–º–æ–≥–∏ —Å–æ–∑–¥–∞—Ç—å",
                "—Å–¥–µ–ª–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç", "—Å–¥–µ–ª–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –û–ø–æ—Ä—É –†–æ—Å—Å–∏–∏
                "–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–ø–æ–º–æ–≥–∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
                "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –æ–ø–æ—Ä—É", "–≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ–ø–æ—Ä—É",
                "–ø–æ–º–æ–≥–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å", "–ø–æ–º–æ–≥–∏ –≤—Å—Ç—É–ø–∏—Ç—å",
                "–∑–∞—è–≤–∫–∞ –≤ –æ–ø–æ—Ä—É —Ä–æ—Å—Å–∏–∏", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –æ–ø–æ—Ä—É —Ä–æ—Å—Å–∏–∏",
                # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
                "–ø–æ–º–æ–≥–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–ø–æ–º–æ–≥–∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ",
                "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
            ]
            
            # –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ü–û–°–õ–ï–î–ù–ò–• 3 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–º
            recent_messages = " ".join([msg['content'].lower() for msg in conversation[-3:]])
            print(f"–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: '{recent_messages[:200]}...'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            found_keywords = [keyword for keyword in document_keywords if keyword in recent_messages]
            print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
            
            # –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏ –±–æ—Ç —Å–∞–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            response_lower = response.lower()
            is_generating_document_text = False
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ –±–æ—Ç–∞
            document_generation_indicators = [
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                ("–∑–∞—è–≤–ª–µ–Ω–∏–µ" in response_lower and ("–ø—Ä–æ—à—É –ø—Ä–∏–Ω—è—Ç—å" in response_lower or "–æ—Ç:" in response_lower)),
                ("–∞–Ω–∫–µ—Ç–∞" in response_lower and ("—Ñ–∞–º–∏–ª–∏—è:" in response_lower or "–∏–º—è:" in response_lower)),
                ("–¥–æ–≥–æ–≤–æ—Ä" in response_lower and ("—Å—Ç–æ—Ä–æ–Ω—ã:" in response_lower or "–ø—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞" in response_lower)),
                
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–æ–ª–µ: –ó–Ω–∞—á–µ–Ω–∏–µ" –∏–ª–∏ "–ü–æ–ª–µ = –ó–Ω–∞—á–µ–Ω–∏–µ"
                (response_lower.count("—Ñ–∞–º–∏–ª–∏—è:") > 0 and response_lower.count("–∏–º—è:") > 0),
                (response_lower.count("—Ç–µ–ª–µ—Ñ–æ–Ω:") > 0 and response_lower.count("email:") > 0 and response_lower.count("–∞–¥—Ä–µ—Å:") > 0),
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∫–µ—Ç—ã
                ("–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in response_lower and "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in response_lower),
            ]
            
            is_generating_document_text = any(document_generation_indicators)
            
            if is_generating_document_text:
                print("[WARNING] –û–ë–ù–ê–†–£–ñ–ï–ù–û: –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞!")
            
            if is_generating_document_text:
                print("–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞!")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                found_keywords.append("–¥–æ–∫—É–º–µ–Ω—Ç (–∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ø–í–ù–û–ú –Ω–∞–º–µ—Ä–µ–Ω–∏–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
            user_messages_only = " ".join([msg['content'].lower() for msg in conversation[-3:] if msg['role'] == 'user'])
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¢–û–õ–¨–ö–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: '{user_messages_only[:150]}...'")
            
            # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω—ã –Ø–í–ù–´–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_action_keywords = [
                "—Å–æ–∑–¥–∞—Ç—å", "—Å–æ–∑–¥–∞–π—Ç–µ", "—Å–æ–∑–¥–∞–π", 
                "–∑–∞–ø–æ–ª–Ω–∏—Ç—å", "–∑–∞–ø–æ–ª–Ω–∏—Ç–µ", "–∑–∞–ø–æ–ª–Ω–∏",  # –î–û–ë–ê–í–õ–ï–ù–û: –∑–∞–ø–æ–ª–Ω–∏
                "–æ—Ñ–æ—Ä–º–∏—Ç—å", "–æ—Ñ–æ—Ä–º–∏—Ç–µ", "–æ—Ñ–æ—Ä–º–∏",
                "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ", "–ø–æ–¥–≥–æ—Ç–æ–≤—å",
                "—Å–¥–µ–ª–∞—Ç—å", "—Å–¥–µ–ª–∞–π—Ç–µ", "—Å–¥–µ–ª–∞–π",
                "–Ω—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç", "–Ω—É–∂–Ω–∞ –∞–Ω–∫–µ—Ç–∞", "–Ω—É–∂–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ",
                "—Ö–æ—á—É –≤—Å—Ç—É–ø–∏—Ç—å", "–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
            ]
            
            has_document_action = any(kw in user_messages_only for kw in document_action_keywords)
            
            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            has_template_name = False
            detected_template_by_name = None
            
            # –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞
            for template in templates:
                template_name = template.get('name', '')
                template_name_lower = template_name.lower()
                template_desc = template.get('description', '').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
                template_words = [w for w in template_name_lower.split() if len(w) > 3]
                
                # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                matches = sum(1 for word in template_words if word in user_messages_only)
                
                # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è "–î–æ–∫—É–º–µ–Ω—Ç –†–æ—Å—Å–∏—è"
                # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å "–¥–æ–∫—É–º–µ–Ω—Ç" + "—Ä–æ—Å—Å–∏—è" + "–∞–Ω–∫–µ—Ç–∞" + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                is_document_russia_request = (
                    "–¥–æ–∫—É–º–µ–Ω—Ç" in user_messages_only and 
                    "—Ä–æ—Å—Å–∏—è" in user_messages_only and
                    "—Ä–æ—Å—Å–∏—è" in template_name_lower
                )
                
                # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ö–æ—Ç—è –±—ã 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
                if matches >= 2 or (matches >= 1 and len(template_words) <= 2) or is_document_russia_request:
                    has_template_name = True
                    detected_template_by_name = template
                    print(f"[OK] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{template.get('name')}'")
                    print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches}, –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: {is_document_russia_request}")
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ü–æ–ª–µ = –ó–Ω–∞—á–µ–Ω–∏–µ –ò–õ–ò –ü–æ–ª–µ: –ó–Ω–∞—á–µ–Ω–∏–µ)
            has_structured_data_equals = "=" in user_messages_only and len(user_messages_only.split("=")) >= 3
            has_structured_data_colon = ":" in user_messages_only and len(user_messages_only.split(":")) >= 3
            has_structured_data = has_structured_data_equals or has_structured_data_colon
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ = —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ!
            if has_template_name and has_structured_data:
                print(f"[DETECTED] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ + –¥–∞–Ω–Ω—ã–µ")
                print(f"   has_template_name: {has_template_name}")
                print(f"   has_structured_data: {has_structured_data} (equals: {has_structured_data_equals}, colon: {has_structured_data_colon})")
                print(f"   detected_template: {detected_template_by_name.get('name') if detected_template_by_name else 'None'}")
                has_document_action = True
            
            print(f"–Ø–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {has_document_action}")
            
            # –ï—Å–ª–∏ –ù–ï–¢ —è–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è - –ù–ï —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            if not has_document_action and not is_generating_document_text:
                print(f"–ù–µ—Ç —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤—ã—Ö–æ–¥")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            analytical_keywords = [
                "–ø—Ä–æ–≥–Ω–æ–∑", "–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞–Ω–∞–ª–∏–∑", "—Ç—Ä–µ–Ω–¥", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–¥–∏–Ω–∞–º–∏–∫–∞", "–æ—Ü–µ–Ω–∫–∞", "–æ–±–∑–æ—Ä", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                "–ø–æ–∫–∞–∂–∏—Ç–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ", "–æ–±—ä—è—Å–Ω–∏—Ç–µ", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "—Ä—ã–Ω–æ–∫"
            ]
            is_analytical_request = any(kw in user_messages_only for kw in analytical_keywords)
            
            print(f"[CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞:")
            print(f"   is_analytical_request: {is_analytical_request}")
            print(f"   has_document_action: {has_document_action}")
            
            if is_analytical_request and not has_document_action:
                print(f"   [ERROR] –≠—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç –ù–ï –Ω—É–∂–µ–Ω")
                return None
            else:
                print(f"   [OK] –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            if found_keywords or has_document_action or is_generating_document_text:
                print(f"\n{'='*60}")
                print(f"[START] –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–¶–ï–°–° –°–û–ó–î–ê–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê")
                print(f"   found_keywords: {found_keywords}")
                print(f"   has_document_action: {has_document_action}")
                print(f"   is_generating_document_text: {is_generating_document_text}")
                print(f"{'='*60}\n")
                
                # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —à–∞–±–ª–æ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –¥–∞–Ω–Ω—ã–µ
                if detected_template_by_name:
                    print(f"[PRIORITY] –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: {detected_template_by_name['name']}")
                    template_recommendation = {
                        "suggested_template_id": detected_template_by_name['template_id'],
                        "suggested_template_name": detected_template_by_name['name'],
                        "confidence": 95,
                        "reasoning": f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ: '{detected_template_by_name['name']}'",
                        "document_category": self._get_category_from_name(detected_template_by_name['name'])
                    }
                    print(f"   Template ID: {template_recommendation['suggested_template_id']}")
                    print(f"   Category: {template_recommendation['document_category']}")
                    print(f"   Confidence: {template_recommendation['confidence']}%")
                else:
                    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    print(f"\n–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∑–∞–ø—Ä–æ—Å–µ...")
                    detected_template = self._detect_template_from_request(user_messages_only, templates)
                    
                    if detected_template:
                        print(f" –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –Ω–∞–ø—Ä—è–º—É—é: {detected_template['name']}")
                        template_recommendation = {
                            "suggested_template_id": detected_template['template_id'],
                            "suggested_template_name": detected_template['name'],
                            "confidence": 95,
                            "reasoning": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª —à–∞–±–ª–æ–Ω '{detected_template['name']}'",
                            "document_category": self._get_category_from_name(detected_template['name'])
                        }
                    else:
                        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
                        print(f" –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
                        template_recommendation = openai_service.classify_document_type(
                            conversation_text, 
                            templates
                        )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                template_analysis = self._analyze_templates_for_fields(templates)
                
                # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                required_fields = self._get_required_fields_for_templates(template_analysis)
                template_fields = list(required_fields.keys())
                
                advanced_extraction = openai_service.extract_structured_data_advanced(
                    conversation_text,
                    template_fields
                )
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                user_info = {}
                for field_name, field_data in advanced_extraction.get("extracted_data", {}).items():
                    if isinstance(field_data, dict):
                        user_info[field_name] = field_data.get("value", "")
                    else:
                        user_info[field_name] = field_data
                
                # –ü–†–û–°–¢–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
                import re
                
                print(f"\n–ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø:")
                print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç: '{conversation_text[:200]}...'")

                # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ = –∏ :)
                field_patterns = {
                    'last_name': r'(?:–§–∞–º–∏–ª–∏—è|—Ñ–∞–º–∏–ª–∏—è)[\s:=]+([–ê-–Ø–Å][–∞-—è—ë]+)',
                    'first_name': r'(?:–ò–º—è|–∏–º—è)[\s:=]+([–ê-–Ø–Å–∞-—è—ë]+)',
                    'middle_name': r'(?:–û—Ç—á–µ—Å—Ç–≤–æ|–æ—Ç—á–µ—Å—Ç–≤–æ)[\s:=]+([–ê-–Ø–Å][–∞-—è—ë]+)',
                    'inn': r'(?:–ò–ù–ù|–∏–Ω–Ω)[\s:=]+(\d{10,12})',
                    'phone': r'(?:–¢–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª–µ—Ñ–æ–Ω)[\s:=]+(\+?[0-9\s\(\)\-]+)',
                    'email': r'(?:E-mail|email|–ø–æ—á—Ç–∞)[\s:=]+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
                    'region': r'(?:–†–µ–≥–∏–æ–Ω|—Ä–µ–≥–∏–æ–Ω)[\s:=]+([–ê-–Ø–Å–∞-—è—ë\s\-]+?)(?:\s+–ì–æ—Ä–æ–¥|$)',
                    'city': r'(?:–ì–æ—Ä–æ–¥|–≥–æ—Ä–æ–¥)[\s:=]+([–ê-–Ø–Å–∞-—è—ë\-]+)',
                    'street': r'(?:–£–ª–∏—Ü–∞|—É–ª–∏—Ü–∞)[\s:=]+([–ê-–Ø–Å–∞-—è—ë\s\-]+?)(?:\s+–î–æ–º|$)',
                    'house': r'(?:–î–æ–º|–¥–æ–º)[\s:=]+(\d+[–∞-—è–ê-–Øa-zA-Z]*)',
                    'apartment': r'(?:–ö–≤\.?|–∫–≤–∞—Ä—Ç–∏—Ä–∞)[\s:=]+(\d+)',
                    'birth_date': r'(?:–ß–∏—Å–ª–æ[,\s]*–º–µ—Å—è—Ü[,\s]*–≥–æ–¥\s+—Ä–æ–∂–¥–µ–Ω–∏—è|–¥–∞—Ç–∞\s+—Ä–æ–∂–¥–µ–Ω–∏—è)[\s:=]+([^–ê-–Ø–Å]+?)(?:\s+[–ê-–Ø–Å]|$)',
                    'passport': r'(?:–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ\s+–¥–∞–Ω–Ω—ã–µ|–ø–∞—Å–ø–æ—Ä—Ç)[\s:=]+([^–ê-–Ø–Å][^\n]+?)(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+:|$)',
                    'education': r'(?:–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)[\s:=]+([^\n]+?)(?:\s+–ú–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã|$)',
                    'work_info': r'(?:–ú–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã[,\s]*–¥–æ–ª–∂–Ω–æ—Å—Ç—å|—Ä–∞–±–æ—Ç–∞)[\s:=]+([^\n]+?)(?:\s+–°—Ñ–µ—Ä–∞|$)',
                    'activity_sphere': r'(?:–°—Ñ–µ—Ä–∞\s+–±–∏–∑–Ω–µ—Å–∞|—Å—Ñ–µ—Ä–∞)[\s:=]+([^\n]+?)(?:\s+–û–ø—ã—Ç\s+–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π|$)',
                    'business_experience': r'(?:–û–ø—ã—Ç\s+–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–π\s+–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)[\s:=]+([^\n]+?)(?:\s+–û–ø—ã—Ç\s+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π|$)',
                    'public_activity_experience': r'(?:–û–ø—ã—Ç\s+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π\s+–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)[\s:=]+([^\n]+?)(?:\s+–≠–∫—Å–ø–µ—Ä—Ç|$)',
                    'expertise_area': r'(?:–≠–∫—Å–ø–µ—Ä—Ç\s+–≤\s+–æ—Ç—Ä–∞—Å–ª–∏)[\s:=]+([^\n]+?)(?:\s+–í—ã–±–æ—Ä–Ω—ã–µ|$)',
                    'elected_position': r'(?:–í—ã–±–æ—Ä–Ω—ã–µ\s+–¥–æ–ª–∂–Ω–æ—Å—Ç–∏)[\s:=]+([^\n]+?)(?:\s+–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è|$)',
                    'additional_info': r'(?:–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è)[\s:=]+([^\n]+?)(?:\s+–î–∞—Ç–∞\s+–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è|$)',
                }
                
                for field_name, pattern in field_patterns.items():
                    match = re.search(pattern, conversation_text, re.IGNORECASE)
                    if match:
                        user_info[field_name] = match.group(1).strip()
                        print(f"   + {field_name}: {match.group(1)[:50]}...")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –§–ò–û –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if user_info.get('last_name') or user_info.get('first_name') or user_info.get('middle_name'):
                    full_name_parts = []
                    if user_info.get('last_name'):
                        full_name_parts.append(user_info['last_name'])
                    if user_info.get('first_name'):
                        full_name_parts.append(user_info['first_name'])
                    if user_info.get('middle_name'):
                        full_name_parts.append(user_info['middle_name'])
                    user_info['full_name'] = ' '.join(full_name_parts)
                    print(f"   + full_name (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ): {user_info['full_name']}")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if user_info.get('region') or user_info.get('city') or user_info.get('street') or user_info.get('house'):
                    address_parts = []
                    if user_info.get('region'):
                        address_parts.append(user_info['region'])
                    if user_info.get('city'):
                        address_parts.append(f"–≥. {user_info['city']}")
                    if user_info.get('street'):
                        address_parts.append(f"—É–ª. {user_info['street']}")
                    if user_info.get('house'):
                        house_str = f"–¥. {user_info['house']}"
                        if user_info.get('apartment'):
                            house_str += f", –∫–≤. {user_info['apartment']}"
                        address_parts.append(house_str)
                    user_info['address'] = ', '.join(address_parts)
                    print(f"   + address (–æ–±—ä–µ–¥–∏–Ω–µ–Ω): {user_info['address'][:80]}...")
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                extracted_fields = [k for k, v in user_info.items() if v and v.strip()]
                print(f"\n–ò–ó–í–õ–ï–ß–ï–ù–û –ü–û–õ–ï–ô: {len(extracted_fields)}")
                for field in extracted_fields:
                    print(f"   {field}: {user_info[field][:50]}...")
                
                # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                user_info.setdefault("user_id", user_id)
                user_info.setdefault("full_name", "")
                user_info.setdefault("email", "")
                user_info.setdefault("phone", "")
                user_info.setdefault("organization", "")
                user_info.setdefault("position", "")
                user_info.setdefault("inn", "")
                
                # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
                completeness_analysis = openai_service.analyze_document_data_completeness(
                    user_info,
                    template_fields,
                    conversation_text
                )
                
                missing_fields = self._get_missing_fields(user_info, required_fields)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                result = {
                    "suggested": True,
                    "templates": templates,
                    "user_data": user_info,
                    "conversation_data": {
                        "message": message,
                        "response": response
                    },
                    "required_fields": required_fields,
                    "template_analysis": template_analysis,
                    # –ù–û–í–´–ï –ü–û–õ–Ø
                    "template_recommendation": template_recommendation,
                    "advanced_extraction": advanced_extraction,
                    "completeness_analysis": completeness_analysis,
                    "missing_fields": missing_fields,
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                completeness_score = completeness_analysis.get("completeness_score", 0)
                confidence_score = completeness_analysis.get("confidence_score", 0)
                can_generate = completeness_analysis.get("can_generate", False)
                
                # –°–ù–ò–ñ–ï–ù –ü–û–†–û–ì: —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–∞–∂–µ –ø—Ä–∏ 50% –ø–æ–ª–Ω–æ—Ç—ã (–±—ã–ª–æ 70%)
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                print(f"\n{'='*60}")
                print(f"[ANALYSIS] –ê–ù–ê–õ–ò–ó –ü–û–õ–ù–û–¢–´ –î–ê–ù–ù–´–•:")
                print(f"   completeness_score: {completeness_score}%")
                print(f"   confidence_score: {confidence_score}%")
                print(f"   can_generate: {can_generate}")
                print(f"   –ü–æ—Ä–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: 50%")
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω —è–≤–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                # —Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –í–°–ï–ì–î–ê, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Ü–µ–Ω–∫–∏ AI
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –î–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–∞–∂–µ –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                is_application_request = ("–∑–∞—è–≤–∫" in message_lower or "–∑–∞—è–≤–ª–µ–Ω" in message_lower) and "–≤—Å—Ç—É–ø–ª–µ–Ω" in message_lower
                force_create = (detected_template_by_name is not None and has_structured_data) or (detected_template_by_name is not None and is_application_request)
                print(f"   force_create (—à–∞–±–ª–æ–Ω+–¥–∞–Ω–Ω—ã–µ): {force_create}")
                print(f"   –†–µ—à–µ–Ω–∏–µ: {'[OK] –°–û–ó–î–ê–ï–ú' if (force_create or (can_generate and completeness_score >= 50)) else '[ERROR] –ù–ï —Å–æ–∑–¥–∞–µ–º'}")
                print(f"{'='*60}\n")
                
                if force_create or (can_generate and completeness_score >= 50):
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –°–û–ó–î–ê–Å–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
                    suggested_template_id = template_recommendation.get("suggested_template_id")
                    suggested_template = template_recommendation.get("suggested_template_name", "")
                    
                    # FALLBACK: –ï—Å–ª–∏ AI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —à–∞–±–ª–æ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –≤—Ä—É—á–Ω—É—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    if not suggested_template_id and templates:
                        print(" AI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —à–∞–±–ª–æ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
                        doc_category = template_recommendation.get("document_category", "–¥–æ–∫—É–º–µ–Ω—Ç")
                        
                        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        for template in templates:
                            template_name_lower = template.get('name', '').lower()
                            
                            if doc_category == "–∑–∞—è–≤–ª–µ–Ω–∏–µ" and "–∑–∞—è–≤–ª–µ–Ω–∏–µ" in template_name_lower:
                                suggested_template_id = template['template_id']
                                suggested_template = template['name']
                                print(f" –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {suggested_template}")
                                break
                            elif doc_category == "–∞–Ω–∫–µ—Ç–∞" and "–∞–Ω–∫–µ—Ç–∞" in template_name_lower:
                                suggested_template_id = template['template_id']
                                suggested_template = template['name']
                                print(f" –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {suggested_template}")
                                break
                            elif doc_category == "–¥–æ–≥–æ–≤–æ—Ä" and "–¥–æ–≥–æ–≤–æ—Ä" in template_name_lower:
                                suggested_template_id = template['template_id']
                                suggested_template = template['name']
                                print(f" –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {suggested_template}")
                                break
                        
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
                        if not suggested_template_id and templates:
                            suggested_template_id = templates[0]['template_id']
                            suggested_template = templates[0]['name']
                            print(f" –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à–∞–±–ª–æ–Ω: {suggested_template}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —à–∞–±–ª–æ–Ω, —Å–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    created_document = None
                    if suggested_template_id:
                        try:
                            print(f" –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {suggested_template}")
                            created_document = self.create_document_from_template(
                                user_id=user_id,
                                template_id=suggested_template_id,
                                user_data=user_info,
                                conversation_data={
                                    "message": message,
                                    "response": response
                                },
                                send_email=True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email
                            )
                            print(f" –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {created_document.get('filepath')}")
                            
                            # –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ Google Sheets
                            if created_document and created_document.get("status") == "success":
                                try:
                                    google_sheets_service.save_document({
                                        "user_id": user_id,
                                        "full_name": user_info.get("full_name", ""),
                                        "email": user_info.get("email", ""),
                                        "document_type": template_recommendation.get("document_category", "–¥–æ–∫—É–º–µ–Ω—Ç"),
                                        "template_name": suggested_template,
                                        "filepath": created_document.get("filepath", ""),
                                        "download_url": created_document.get("download_url", ""),
                                        "completeness_score": completeness_score,
                                        "confidence_score": confidence_score,
                                        "data_quality": completeness_analysis.get("data_quality", "")
                                    })
                                except Exception as e:
                                    print(f" –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
                            
                        except Exception as e:
                            print(f" –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                            import traceback
                            traceback.print_exc()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if created_document and created_document.get("status") == "success":
                        # –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
                        download_url = created_document.get("download_url", "")
                        filename = created_document.get("filepath", "").split("/")[-1]
                        
                        result["message"] = f""" **–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

**–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {template_recommendation.get('document_category', '–¥–æ–∫—É–º–µ–Ω—Ç')}
**–®–∞–±–ª–æ–Ω:** {suggested_template}
**–ò–º—è —Ñ–∞–π–ª–∞:** {filename}

**–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π:** {len(completeness_analysis.get('filled_fields', []))} –∏–∑ {len(template_fields)}
**–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã:** {completeness_score}%
**–û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:** {confidence_score}%
**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:** {completeness_analysis.get('data_quality', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

 **–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!**

**–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:** http://localhost:8000{download_url}"""
                        
                        result["created_document"] = created_document
                        result["needs_data"] = False
                    else:
                        # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é
                        result["message"] = f""" **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç!**

**–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {template_recommendation.get('document_category', '–¥–æ–∫—É–º–µ–Ω—Ç')}
**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —à–∞–±–ª–æ–Ω:** {suggested_template or '–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'}
**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {template_recommendation.get('confidence', 0)}%

**–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π:** {len(completeness_analysis.get('filled_fields', []))} –∏–∑ {len(template_fields)}
**–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã:** {completeness_score}%
**–û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:** {confidence_score}%
**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:** {completeness_analysis.get('data_quality', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

 **–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.**
–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:"""
                        result["needs_data"] = False
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ü–µ–Ω–∫–µ AI
                    print(f"\n[WARNING] AI —Å—á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º force_create...")
                    print(f"   detected_template_by_name: {detected_template_by_name is not None}")
                    print(f"   has_structured_data: {has_structured_data}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–π —à–∞–±–ª–æ–Ω + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–æ–∑–¥–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ!
                    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –î–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–∞–∂–µ –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    is_application_request_fallback = ("–∑–∞—è–≤–∫" in message_lower or "–∑–∞—è–≤–ª–µ–Ω" in message_lower) and "–≤—Å—Ç—É–ø–ª–µ–Ω" in message_lower
                    if detected_template_by_name and (has_structured_data or is_application_request_fallback):
                        print(f"   [OK] FORCE CREATE: –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!")
                        suggested_template_id = detected_template_by_name['template_id']
                    else:
                        print(f"   [WARNING] –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º...")
                        suggested_template_id = template_recommendation.get("suggested_template_id")
                    
                    # Fallback –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
                    if not suggested_template_id and templates:
                        doc_category = template_recommendation.get("document_category", "–¥–æ–∫—É–º–µ–Ω—Ç")
                        for template in templates:
                            template_name_lower = template.get('name', '').lower()
                            if doc_category.lower() in template_name_lower or "–∑–∞—è–≤–ª–µ–Ω–∏–µ" in template_name_lower:
                                suggested_template_id = template['template_id']
                                break
                        if not suggested_template_id:
                            suggested_template_id = templates[0]['template_id']
                    
                    # –°–û–ó–î–ê–ï–ú –î–û–ö–£–ú–ï–ù–¢ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    created_document = None
                    if suggested_template_id:
                        try:
                            print(f" –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ({completeness_score}%)")
                            created_document = self.create_document_from_template(
                                user_id=user_id,
                                template_id=suggested_template_id,
                                user_data=user_info,
                                conversation_data={
                                    "message": message,
                                    "response": response
                                },
                                send_email=True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email
                            )
                            print(f" –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {created_document.get('filepath')}")
                            
                            # –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ Google Sheets
                            if created_document and created_document.get("status") == "success":
                                try:
                                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                                    template_name = next((t['name'] for t in templates if t['template_id'] == suggested_template_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω")
                                    
                                    google_sheets_service.save_document({
                                        "user_id": user_id,
                                        "full_name": user_info.get("full_name", ""),
                                        "email": user_info.get("email", ""),
                                        "document_type": template_recommendation.get("document_category", "–¥–æ–∫—É–º–µ–Ω—Ç"),
                                        "template_name": template_name,
                                        "filepath": created_document.get("filepath", ""),
                                        "download_url": created_document.get("download_url", ""),
                                        "completeness_score": completeness_score,
                                        "confidence_score": confidence_score,
                                        "data_quality": completeness_analysis.get("data_quality", "")
                                    })
                                except Exception as e:
                                    print(f" –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
                            
                        except Exception as e:
                            print(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                            import traceback
                            traceback.print_exc()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    missing_list = "\n".join([f"‚Ä¢ {field}" for field in missing_fields])
                    
                    if created_document and created_document.get("status") == "success":
                        # –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        download_url = created_document.get("download_url", "")
                        filename = created_document.get("filepath", "").split("/")[-1]
                        
                        result["message"] = f""" **–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!**

 **–í–Ω–∏–º–∞–Ω–∏–µ:** –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ ({completeness_score}% –ø–æ–ª–Ω–æ—Ç—ã).

**–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ:**
{missing_list}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.

 **–î–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:**"""
                        
                        result["created_document"] = created_document
                        result["needs_data"] = False
                    else:
                        # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        recommendations = completeness_analysis.get("recommendations", [])
                        recommendations_text = "\n".join([f"- {rec}" for rec in recommendations])
                        
                        suggested_questions = completeness_analysis.get("suggested_questions", [])
                        questions_text = "\n".join([f"? {q}" for q in suggested_questions[:3]])
                        
                        result["message"] = f""" **–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç!**

**–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:** {template_recommendation.get('document_category', '–¥–æ–∫—É–º–µ–Ω—Ç')}

**–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π:** {len(completeness_analysis.get('filled_fields', []))} –∏–∑ {len(template_fields)}
**–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã:** {completeness_score}%

 **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ:**
{missing_list}

{recommendations_text}

{questions_text if questions_text else ''}

**–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.**"""
                        result["needs_data"] = True
                
                print(f"\n{'='*60}")
                print(f"[RESULT] –í–û–ó–í–†–ê–©–ê–ï–ú RESULT —Å document_suggestion:")
                print(f"   - suggested: {result.get('suggested')}")
                print(f"   - created_document exists: {result.get('created_document') is not None}")
                if result.get('created_document'):
                    print(f"   - created_document.status: {result.get('created_document', {}).get('status')}")
                    print(f"   - created_document.filepath: {result.get('created_document', {}).get('filepath', 'N/A')}")
                print(f"   - needs_data: {result.get('needs_data')}")
                print(f"   - message length: {len(result.get('message', ''))}")
                print(f"{'='*60}\n")
                return result
            
            print(f"\n[ERROR] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None")
            return None
            
        except Exception as e:
            print(f" –û–®–ò–ë–ö–ê –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def _analyze_templates_for_fields(self, templates: List[Dict]) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            field_analysis = {
                "common_fields": set(),
                "template_specific": {},
                "all_possible_fields": set()
            }
            
            # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
            field_patterns = {
                "full_name": ["{{full_name}}", "{{name}}", "{{—Ñ–∏–æ}}", "{{fio}}", "–§–ò–û", "–ò–º—è", "–§–∞–º–∏–ª–∏—è"],
                "email": ["{{email}}", "{{–ø–æ—á—Ç–∞}}", "{{mail}}", "Email", "–ü–æ—á—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"],
                "phone": ["{{phone}}", "{{—Ç–µ–ª–µ—Ñ–æ–Ω}}", "{{tel}}", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"],
                "organization": ["{{organization}}", "{{–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è}}", "{{org}}", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ö–æ–º–ø–∞–Ω–∏—è", "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ"],
                "position": ["{{position}}", "{{–¥–æ–ª–∂–Ω–æ—Å—Ç—å}}", "{{pos}}", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü–æ–∑–∏—Ü–∏—è", "–†–æ–ª—å"],
                "inn": ["{{inn}}", "{{–∏–Ω–Ω}}", "–ò–ù–ù", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞"],
                "address": ["{{address}}", "{{–∞–¥—Ä–µ—Å}}", "{{addr}}", "–ê–¥—Ä–µ—Å", "–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞"],
                "passport": ["{{passport}}", "{{–ø–∞—Å–ø–æ—Ä—Ç}}", "{{pass}}", "–ü–∞—Å–ø–æ—Ä—Ç", "–î–æ–∫—É–º–µ–Ω—Ç"],
                "birth_date": ["{{birth_date}}", "{{–¥–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è}}", "{{birth}}", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–†–æ–¥–∏–ª—Å—è"],
                "business_type": ["{{business_type}}", "{{—Ç–∏–ø_–±–∏–∑–Ω–µ—Å–∞}}", "{{biz_type}}", "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞", "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]
            }
            
            for template in templates:
                template_id = template.get('template_id', '')
                template_name = template.get('name', '')
                template_fields = set()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                template_name_lower = template_name.lower()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                doc_type = self._determine_document_type(template_name_lower)
                
                # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                base_fields = self._get_base_fields_for_document_type(doc_type)
                template_fields.update(base_fields)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑
                field_analysis["common_fields"].update(template_fields)
                field_analysis["all_possible_fields"].update(template_fields)
                field_analysis["template_specific"][template_id] = {
                    "name": template_name,
                    "type": doc_type,
                    "fields": list(template_fields)
                }
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            field_analysis["common_fields"] = list(field_analysis["common_fields"])
            field_analysis["all_possible_fields"] = list(field_analysis["all_possible_fields"])
            
            print(f"–ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–æ–≤: {field_analysis}")
            return field_analysis
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return {"common_fields": [], "template_specific": {}, "all_possible_fields": []}
    
    def _determine_document_type(self, template_name: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
        """
        if any(word in template_name for word in ["–∑–∞—è–≤–ª–µ–Ω–∏–µ", "–∑–∞—è–≤–∫–∞", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"]):
            return "–∑–∞—è–≤–ª–µ–Ω–∏–µ"
        elif any(word in template_name for word in ["–∞–Ω–∫–µ—Ç–∞", "–∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–ø—Ä–æ—Å"]):
            return "–∞–Ω–∫–µ—Ç–∞"
        elif any(word in template_name for word in ["–¥–æ–≥–æ–≤–æ—Ä", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç"]):
            return "–¥–æ–≥–æ–≤–æ—Ä"
        elif any(word in template_name for word in ["–∂–∞–ª–æ–±–∞", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è"]):
            return "–∂–∞–ª–æ–±–∞"
        elif any(word in template_name for word in ["–æ—Ç—á–µ—Ç", "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å"]):
            return "–æ—Ç—á–µ—Ç"
        elif any(word in template_name for word in ["—Å–ø—Ä–∞–≤–∫–∞", "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ"]):
            return "—Å–ø—Ä–∞–≤–∫–∞"
        elif any(word in template_name for word in ["–ø—Ä–æ—Ç–æ–∫–æ–ª", "–∑–∞—Å–µ–¥–∞–Ω–∏–µ"]):
            return "–ø—Ä–æ—Ç–æ–∫–æ–ª"
        else:
            return "–¥–æ–∫—É–º–µ–Ω—Ç"
    
    def _get_base_fields_for_document_type(self, doc_type: str) -> set:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        field_mapping = {
            "–∑–∞—è–≤–ª–µ–Ω–∏–µ": {"full_name", "email", "phone", "organization"},
            "–∞–Ω–∫–µ—Ç–∞": {"full_name", "email", "phone", "organization", "position", "inn", "address", "birth_date"},
            "–¥–æ–≥–æ–≤–æ—Ä": {"full_name", "email", "phone", "organization", "inn", "address"},
            "–∂–∞–ª–æ–±–∞": {"full_name", "email", "phone", "address"},
            "–æ—Ç—á–µ—Ç": {"full_name", "organization", "position", "business_type"},
            "—Å–ø—Ä–∞–≤–∫–∞": {"full_name", "email", "phone", "address"},
            "–ø—Ä–æ—Ç–æ–∫–æ–ª": {"full_name", "organization", "position"},
            "–¥–æ–∫—É–º–µ–Ω—Ç": {"full_name", "email", "phone", "organization"}
        }
        
        return field_mapping.get(doc_type, {"full_name", "email", "phone"})
    
    def _get_required_fields_for_templates(self, template_analysis: Dict) -> Dict[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤
        """
        field_labels = {
            "full_name": "–§–ò–û",
            "last_name": "–§–∞–º–∏–ª–∏—è",
            "first_name": "–ò–º—è",
            "middle_name": "–û—Ç—á–µ—Å—Ç–≤–æ",
            "email": "Email",
            "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
            "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
            "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
            "inn": "–ò–ù–ù",
            "address": "–ê–¥—Ä–µ—Å",
            "passport": "–ü–∞—Å–ø–æ—Ä—Ç",
            "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
            "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
            "region": "–†–µ–≥–∏–æ–Ω",
            "city": "–ì–æ—Ä–æ–¥",
            "street": "–£–ª–∏—Ü–∞",
            "house": "–î–æ–º",
            "apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
            "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "work_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ",
            "activity_sphere": "–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "business_experience": "–û–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ",
            "public_activity_experience": "–û–ø—ã—Ç –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "expertise_area": "–û–±–ª–∞—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã",
            "elected_position": "–í—ã–±–æ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            "additional_info": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        }
        
        # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –ø–æ–ª—è
        common_fields = template_analysis.get("common_fields", [])
        required_fields = {}
        
        for field in common_fields:
            if field in field_labels:
                required_fields[field] = field_labels[field]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–∏—Ö –ø–æ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
        if not required_fields:
            required_fields = {
                "full_name": "–§–ò–û",
                "email": "Email",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
            }
        
        return required_fields
    
    def _analyze_template_content(self, template_id: str) -> Dict[str, str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—è –∏–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        """
        try:
            from services import document_service
            import re
            import os
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
            templates = document_service.get_templates_list()
            template_info = None
            
            for template in templates:
                if template['template_id'] == template_id:
                    template_info = template
                    break
            
            if not template_info:
                print(f"–®–∞–±–ª–æ–Ω {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return self._get_default_fields_for_template(template_id)
            
            template_name = template_info['name']
            template_path = template_info.get('file_path', '')
            
            print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω: {template_name} (–ø—É—Ç—å: {template_path})")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
            placeholders = self._extract_placeholders_from_file(template_path)
            
            if placeholders:
                print(f"–ù–∞–π–¥–µ–Ω—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {list(placeholders.keys())}")
                return placeholders
            else:
                print("–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
                # Fallback –∫ –∞–Ω–∞–ª–∏–∑—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                template_name_lower = template_name.lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
            if '–∂–∞–ª–æ–±–∞' in template_name_lower or 'complaint' in template_name_lower:
                return {
                    "full_name": "–§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è",
                    "email": "Email –¥–ª—è —Å–≤—è–∑–∏",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                    "inn": "–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "address": "–ê–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "business_type": "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                }
            elif '–ø—Ä–æ—Ç–æ–∫–æ–ª' in template_name_lower or 'protocol' in template_name_lower:
                return {
                    "full_name": "–§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                    "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                    "email": "Email",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω"
                }
            elif '–¥–æ–≥–æ–≤–æ—Ä' in template_name_lower or 'contract' in template_name_lower:
                return {
                    "full_name": "–§–ò–û",
                    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                    "inn": "–ò–ù–ù",
                    "address": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å",
                    "email": "Email",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                }
            elif '–∑–∞—è–≤–∫–∞' in template_name_lower or 'application' in template_name_lower:
                return {
                    "full_name": "–§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è",
                    "organization": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "inn": "–ò–ù–ù",
                    "email": "Email",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "business_type": "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "address": "–ê–¥—Ä–µ—Å"
                }
            elif '—Ä–æ—Å—Å–∏—è' in template_name_lower or 'russia' in template_name_lower:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –û–ø–æ—Ä—ã –†–æ—Å—Å–∏–∏
                return {
                    "full_name": "–§–ò–û",
                    "email": "Email",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "organization": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "inn": "–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "address": "–ê–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "business_type": "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                }
            elif '–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ' in template_name_lower or 'membership' in template_name_lower:
                # –ü–æ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                return {
                    "full_name": "–§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è",
                    "organization": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "inn": "–ò–ù–ù",
                    "email": "Email",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "business_type": "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "address": "–ê–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                }
            elif '73' in template_name_lower or '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π' in template_name_lower:
                # –ü–æ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ 73-–§–ó
                return {
                    "full_name": "–§–ò–û",
                    "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                    "inn": "–ò–ù–ù",
                    "email": "Email",
                    "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                    "address": "–ê–¥—Ä–µ—Å",
                    "business_type": "–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                }
            else:
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                return self._get_default_fields_for_template(template_id)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
            return self._get_default_fields_for_template(template_id)
    
    def _extract_placeholders_from_file(self, file_path: str) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞
        """
        try:
            import re
            import os
            from docx import Document
            
            if not os.path.exists(file_path):
                print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return {}
            
            placeholders = {}
            content = ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if file_path.lower().endswith('.docx'):
                # –ß–∏—Ç–∞–µ–º DOCX —Ñ–∞–π–ª
                try:
                    doc = Document(file_path)
                    for paragraph in doc.paragraphs:
                        content += paragraph.text + "\n"
                    for table in doc.tables:
                        for row in table.rows:
                            for cell in row.cells:
                                content += cell.text + " "
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX —Ñ–∞–π–ª–∞: {e}")
                    return {}
            elif file_path.lower().endswith('.txt'):
                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è TXT —Ñ–∞–π–ª–∞: {e}")
                    return {}
            else:
                print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_path}")
                return {}
            
            # –ò—â–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {{field_name}}
            placeholder_pattern = r'\{\{([^}]+)\}\}'
            matches = re.findall(placeholder_pattern, content)
            
            # –ú–∞–ø–ø–∏–Ω–≥ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            field_labels = {
                "full_name": "–§–ò–û",
                "name": "–§–ò–û",
                "—Ñ–∏–æ": "–§–ò–û",
                "fio": "–§–ò–û",
                "last_name": "–§–∞–º–∏–ª–∏—è",
                "—Ñ–∞–º–∏–ª–∏—è": "–§–∞–º–∏–ª–∏—è",
                "first_name": "–ò–º—è",
                "–∏–º—è": "–ò–º—è",
                "middle_name": "–û—Ç—á–µ—Å—Ç–≤–æ",
                "–æ—Ç—á–µ—Å—Ç–≤–æ": "–û—Ç—á–µ—Å—Ç–≤–æ",
                "email": "Email",
                "–ø–æ—á—Ç–∞": "Email",
                "mail": "Email",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "—Ç–µ–ª–µ—Ñ–æ–Ω": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "tel": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                "org": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                "position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "–¥–æ–ª–∂–Ω–æ—Å—Ç—å": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "pos": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "inn": "–ò–ù–ù",
                "–∏–Ω–Ω": "–ò–ù–ù",
                "address": "–ê–¥—Ä–µ—Å",
                "–∞–¥—Ä–µ—Å": "–ê–¥—Ä–µ—Å",
                "addr": "–ê–¥—Ä–µ—Å",
                "passport": "–ü–∞—Å–ø–æ—Ä—Ç",
                "–ø–∞—Å–ø–æ—Ä—Ç": "–ü–∞—Å–ø–æ—Ä—Ç",
                "pass": "–ü–∞—Å–ø–æ—Ä—Ç",
                "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                "–¥–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                "birth": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
                "—Ç–∏–ø_–±–∏–∑–Ω–µ—Å–∞": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
                "biz_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
                "region": "–†–µ–≥–∏–æ–Ω",
                "—Ä–µ–≥–∏–æ–Ω": "–†–µ–≥–∏–æ–Ω",
                "city": "–ì–æ—Ä–æ–¥",
                "–≥–æ—Ä–æ–¥": "–ì–æ—Ä–æ–¥",
                "street": "–£–ª–∏—Ü–∞",
                "—É–ª–∏—Ü–∞": "–£–ª–∏—Ü–∞",
                "house": "–î–æ–º",
                "–¥–æ–º": "–î–æ–º",
                "apartment": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
                "–∫–≤–∞—Ä—Ç–∏—Ä–∞": "–ö–≤–∞—Ä—Ç–∏—Ä–∞",
                "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                "work_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ",
                "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_–æ_—Ä–∞–±–æ—Ç–µ": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ",
                "activity_sphere": "–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "—Å—Ñ–µ—Ä–∞_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "business_experience": "–û–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ",
                "–æ–ø—ã—Ç_–≤_–±–∏–∑–Ω–µ—Å–µ": "–û–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ",
                "public_activity_experience": "–û–ø—ã—Ç –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–æ–ø—ã—Ç_–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–û–ø—ã—Ç –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "expertise_area": "–û–±–ª–∞—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã",
                "–æ–±–ª–∞—Å—Ç—å_—ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã": "–û–±–ª–∞—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã",
                "elected_position": "–í—ã–±–æ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
                "–≤—ã–±–æ—Ä–Ω–∞—è_–¥–æ–ª–∂–Ω–æ—Å—Ç—å": "–í—ã–±–æ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
                "additional_info": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "user_id": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "date": "–î–∞—Ç–∞",
                "–¥–∞—Ç–∞": "–î–∞—Ç–∞",
                "time": "–í—Ä–µ–º—è",
                "–≤—Ä–µ–º—è": "–í—Ä–µ–º—è"
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
            for match in matches:
                field_name = match.strip().lower()
                if field_name in field_labels:
                    placeholders[field_name] = field_labels[field_name]
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    placeholders[field_name] = match.strip()
            
            print(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {len(placeholders)}")
            for field, label in placeholders.items():
                print(f"  ‚Ä¢ {field} ‚Üí {label}")
            
            return placeholders
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {e}")
            return {}
    
    def _get_default_fields_for_template(self, template_id: str) -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        """
        return {
            "full_name": "–§–ò–û",
            "email": "Email",
            "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
            "organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
        }
    
    def _analyze_data_completeness(self, user_data: Dict, required_fields: Dict[str, str]) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            required_fields: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        
        Returns:
            –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        """
        filled_fields = []
        missing_fields = []
        
        for field, label in required_fields.items():
            if user_data.get(field) and str(user_data[field]).strip():
                filled_fields.append(label)
            else:
                missing_fields.append(label)
        
        total_fields = len(required_fields)
        filled_count = len(filled_fields)
        completeness_score = int((filled_count / total_fields) * 100) if total_fields > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if completeness_score >= 90:
            data_quality = "excellent"
        elif completeness_score >= 70:
            data_quality = "good"
        elif completeness_score >= 50:
            data_quality = "fair"
        else:
            data_quality = "poor"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        suggested_questions = []
        for field, label in required_fields.items():
            if not user_data.get(field) or not str(user_data[field]).strip():
                if field == "full_name":
                    suggested_questions.append("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)")
                elif field == "email":
                    suggested_questions.append("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å")
                elif field == "phone":
                    suggested_questions.append("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                elif field == "organization":
                    suggested_questions.append("–í –∫–∞–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")
                elif field == "position":
                    suggested_questions.append("–ö–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ?")
                elif field == "inn":
                    suggested_questions.append("–£–∫–∞–∂–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
                elif field == "address":
                    suggested_questions.append("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å")
                elif field == "passport":
                    suggested_questions.append("–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
                elif field == "birth_date":
                    suggested_questions.append("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
                elif field == "business_type":
                    suggested_questions.append("–ö–∞–∫–æ–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –≤—ã –≤–µ–¥–µ—Ç–µ?")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if completeness_score < 50:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: –§–ò–û, email, —Ç–µ–ª–µ—Ñ–æ–Ω")
        if "email" in missing_fields:
            recommendations.append("Email –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        if "full_name" in missing_fields:
            recommendations.append("–§–ò–û —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return {
            "completeness_score": completeness_score,
            "confidence_score": min(completeness_score + 10, 100),  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –ø–æ–ª–Ω–æ—Ç—ã
            "data_quality": data_quality,
            "filled_fields": filled_fields,
            "missing_fields": missing_fields,
            "suggested_questions": suggested_questions[:5],  # –ú–∞–∫—Å–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤
            "recommendations": recommendations
        }
    
    def _get_missing_fields(self, user_data: Dict, required_fields: Dict[str, str]) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        missing = []
        for field, label in required_fields.items():
            if not user_data.get(field):
                missing.append(label)
        return missing
    
    def _format_required_fields(self, required_fields: Dict[str, str]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if not required_fields:
            return "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        
        formatted = []
        for field, label in required_fields.items():
            formatted.append(f"‚Ä¢ **{label}**")
        
        return "\n".join(formatted)
    
    def preview_document(self, template_id: str, user_data: Dict) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        
        Args:
            template_id: ID —à–∞–±–ª–æ–Ω–∞
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
            templates = document_service.get_templates_list()
            template = next((t for t in templates if t['template_id'] == template_id), None)
            
            if not template:
                return {
                    "status": "error",
                    "message": "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –ø–æ–º–æ—â—å—é AI
            preview_text = openai_service.generate_document_preview(
                template.get('name', '–î–æ–∫—É–º–µ–Ω—Ç'),
                user_data
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            template_fields = self._get_base_fields_for_document_type(
                self._determine_document_type(template.get('name', '').lower())
            )
            
            completeness = openai_service.analyze_document_data_completeness(
                user_data,
                list(template_fields),
                ""
            )
            
            return {
                "status": "success",
                "template_name": template.get('name', ''),
                "preview": preview_text,
                "completeness": completeness,
                "can_generate": completeness.get('can_generate', False)
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
            }
    
    def create_document_from_template(self, user_id: str, template_id: str, 
                                     user_data: Dict, conversation_data: Dict = None,
                                     send_email: bool = False) -> Dict:
        """
        –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ (–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            template_id: ID —à–∞–±–ª–æ–Ω–∞
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_data: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            send_email: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ email
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data['user_id'] = user_id
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            filepath = document_service.fill_uploaded_template(
                template_id, 
                user_data, 
                conversation_data
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
            templates = document_service.get_templates_list()
            template = next((t for t in templates if t['template_id'] == template_id), None)
            template_name = template.get('name', '–î–æ–∫—É–º–µ–Ω—Ç') if template else '–î–æ–∫—É–º–µ–Ω—Ç'
            
            result = {
                "status": "success",
                "filepath": filepath,
                "download_url": f"/api/documents/download?file={filepath}",
                "template_name": template_name,
                "message": f" –î–æ–∫—É–º–µ–Ω—Ç '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if send_email and user_data.get('email'):
                try:
                    from integrations import gmail_service
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gmail —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if not gmail_service.service:
                        gmail_service._initialize_service()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–∏—è
                    download_url = f"http://localhost:8000{result['download_url']}"
                    email_body = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç '{template_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ "–û–ø–æ—Ä–∞ –†–æ—Å—Å–∏–∏"
"""
                    
                    email_result = gmail_service.send_email(
                        to_email=user_data['email'],
                        subject=f"–°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {template_name}",
                        body=email_body
                    )
                    
                    if email_result:
                        result["message"] += f"\n[EMAIL] –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {user_data['email']}"
                    else:
                        result["message"] += "\n[EMAIL] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ email."
                except Exception as e:
                    result["message"] += f"\n –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}"
            elif send_email and not user_data.get('email'):
                result["message"] += "\n[EMAIL] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ email –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
            
            return result
            
        except Exception as e:
            return {
                "status": "error",
                "message": f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            }
    
    def _detect_template_from_request(self, user_message: str, templates: List[Dict]) -> Optional[Dict]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (lowercase)
            templates: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ None
        """
        message_lower = user_message.lower()
        
        # –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        stopwords = ["—Å–æ–∑–¥–∞—Ç—å", "—Å–æ–∑–¥–∞–π—Ç–µ", "–∑–∞–ø–æ–ª–Ω–∏—Ç—å", "–∑–∞–ø–æ–ª–Ω–∏—Ç–µ", "–æ—Ñ–æ—Ä–º–∏—Ç—å", 
                     "–¥–æ–∫—É–º–µ–Ω—Ç", "—à–∞–±–ª–æ–Ω", "–Ω—É–∂–µ–Ω", "–Ω—É–∂–Ω–∞", "–¥–ª—è", "–ø–æ", "–≤", "–Ω–∞"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        words = message_lower.split()
        keywords = [w for w in words if w not in stopwords and len(w) > 2]
        
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {keywords}")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —à–∞–±–ª–æ–Ω–∞–º
        best_match = None
        best_score = 0
        
        for template in templates:
            template_name = template.get('name', '').lower()
            template_desc = template.get('description', '').lower()
            combined = f"{template_name} {template_desc}"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            score = 0
            matched_words = []
            
            for keyword in keywords:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                if keyword in combined:
                    score += 2
                    matched_words.append(keyword)
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞)
                elif any(word.startswith(keyword) for word in combined.split()):
                    score += 1
                    matched_words.append(f"{keyword}*")
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
            if keywords and template_name.startswith(keywords[0]):
                score += 3
            
            print(f"   - '{template.get('name')}': score={score}, matched={matched_words}")
            
            if score > best_score:
                best_score = score
                best_match = template
        
        # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 2 –±–∞–ª–ª–∞ –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if best_score >= 2:
            return best_match
        
        return None
    
    def _get_category_from_name(self, template_name: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        name_lower = template_name.lower()
        
        if "–∑–∞—è–≤–ª–µ–Ω–∏–µ" in name_lower or "–∑–∞—è–≤–∫–∞" in name_lower:
            return "–∑–∞—è–≤–ª–µ–Ω–∏–µ"
        elif "–∞–Ω–∫–µ—Ç–∞" in name_lower:
            return "–∞–Ω–∫–µ—Ç–∞"
        elif "–¥–æ–≥–æ–≤–æ—Ä" in name_lower:
            return "–¥–æ–≥–æ–≤–æ—Ä"
        elif "–∂–∞–ª–æ–±–∞" in name_lower:
            return "–∂–∞–ª–æ–±–∞"
        elif "–ø—Ä–æ—Ç–æ–∫–æ–ª" in name_lower:
            return "–ø—Ä–æ—Ç–æ–∫–æ–ª"
        elif "–æ—Ç—á–µ—Ç" in name_lower or "–æ—Ç—á—ë—Ç" in name_lower:
            return "–æ—Ç—á–µ—Ç"
        elif "—Å–ø—Ä–∞–≤–∫–∞" in name_lower:
            return "—Å–ø—Ä–∞–≤–∫–∞"
        else:
            return "–¥—Ä—É–≥–æ–µ"
    
    def get_conversation_history(self, user_id: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        """
        return self.conversations.get(user_id, [])
    
    def clear_conversation(self, user_id: str):
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.conversations:
            del self.conversations[user_id]
    
    def _check_and_save_complaint(self, user_id: str, message: str, conversation_history: List[Dict]):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∞–ª–æ–±–æ–π, –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            message_lower = message.lower()
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∂–∞–ª–æ–±
            complaint_keywords = [
                "–∂–∞–ª–æ–±–∞", "–∂–∞–ª—É—é—Å—å", "–Ω–µ–¥–æ–≤–æ–ª–µ–Ω", "–Ω–µ–¥–æ–≤–æ–ª—å–Ω–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–ø—Ä–æ–±–ª–µ–º—ã",
                "–Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–Ω–∞—Ä—É—à–µ–Ω–∏—è", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–∫–æ—à–º–∞—Ä",
                "–±–µ–∑–æ–±—Ä–∞–∑–∏–µ", "–≤–æ–∑–º—É—â–µ–Ω", "–≤–æ–∑–º—É—â–µ–Ω–∞", "–≤–æ–∑–º—É—â–∞—é—Å—å", "–Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ",
                "–Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ", "–æ–±–∏–¥–Ω–æ", "–æ–±–∏–∂–µ–Ω", "–æ–±–∏–∂–µ–Ω–∞", "–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ",
                "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–ø—Ä–µ—Ç–µ–Ω–∑–∏–∏", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
                "–æ–±–º–∞–Ω", "–æ–±–º–∞–Ω—É–ª–∏", "–æ–±–º–∞–Ω—ã–≤–∞—é—Ç", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "–º–æ—à–µ–Ω–Ω–∏–∫–∏",
                "–≤–æ—Ä–æ–≤—Å—Ç–≤–æ", "–≤–æ—Ä—É—é—Ç", "–∫—Ä–∞–∂–∞", "—É–∫—Ä–∞–ª–∏", "–Ω–µ—á–µ—Å—Ç–Ω–æ", "–Ω–µ—á–µ—Å—Ç–Ω—ã–µ",
                "–ø–æ–¥–¥–µ–ª–∫–∞", "–ø–æ–¥–¥–µ–ª–∫–∏", "—Ñ–∞–ª—å—à–∏–≤–∫–∞", "—Ñ–∞–ª—å—à–∏–≤—ã–µ", "–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ",
                "–Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ", "–ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω–æ", "–Ω–∞—Ä—É—à–∞—é—Ç –∑–∞–∫–æ–Ω", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞",
                "–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", "–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∏—Ä—É—é—Ç", "—É—â–µ–º–ª—è—é—Ç –ø—Ä–∞–≤–∞", "–Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∞–≤–∞",
                "–Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç", "–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç", "–Ω–µ —Å–æ–±–ª—é–¥–∞—é—Ç", "–Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç",
                "–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç", "–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç", "–Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç", "–Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç",
                "–Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç", "–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", "–Ω–µ –ø–æ–º–æ–≥–∞—é—Ç", "–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç",
                "–æ—Ç–∫–∞–∑—ã–≤–∞—é—Ç—Å—è", "–æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è", "–æ—Ç–∫–∞–∑", "–æ—Ç–∫–∞–∑—ã", "–æ—Ç–∫–ª–æ–Ω–∏–ª–∏",
                "–æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É", "–æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏",
                "–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –∑–∞—è–≤–∫—É", "–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–∑–∞—Ç—è–≥–∏–≤–∞—é—Ç",
                "–∑–∞—Ç—è–≥–∏–≤–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", "–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç", "–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", "–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ø–ª–æ—Ö–∞—è —Ä–∞–±–æ—Ç–∞", "–ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞—é—Ç",
                "–Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ", "–Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ", "–Ω–µ –∑–Ω–∞—é—Ç", "–Ω–µ –∑–Ω–∞–µ—Ç", "–Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç",
                "–Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç", "–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è", "–Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è", "–Ω–µ —É–º–µ—é—Ç", "–Ω–µ —É–º–µ–µ—Ç"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∂–∞–ª–æ–±
            is_complaint = any(keyword in message_lower for keyword in complaint_keywords)
            
            if is_complaint:
                print(f"\n{'='*60}")
                print(f"[COMPLAINT DETECTED] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∂–∞–ª–æ–±–∞!")
                print(f"User ID: {user_id}")
                print(f"Message: {message[:100]}...")
                print(f"{'='*60}\n")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                user_data = self._extract_user_data_from_history(conversation_history)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±—ã
                category = self._determine_complaint_category(message_lower)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∂–∞–ª–æ–±—ã
                priority = self._determine_complaint_priority(message_lower)
                
                # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
                complaint_data = {
                    "complaint_id": f"COMP_{user_id}_{int(datetime.now().timestamp())}",
                    "user_id": user_id,
                    "full_name": user_data.get("full_name", ""),
                    "email": user_data.get("email", ""),
                    "phone": user_data.get("phone", ""),
                    "organization": user_data.get("organization", ""),
                    "complaint_text": message,
                    "category": category,
                    "priority": priority
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ Google Sheets
                success = google_sheets_service.save_complaint(complaint_data)
                
                if success:
                    print(f"[SUCCESS] –ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets!")
                    print(f"   - ID: {complaint_data['complaint_id']}")
                    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                    print(f"   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                else:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –≤ Google Sheets")
                    
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã: {e}")
            import traceback
            traceback.print_exc()
    
    def _extract_user_data_from_history(self, conversation_history: List[Dict]) -> Dict:
        """
        –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            conversation_history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_data = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = []
        for msg in conversation_history:
            if msg.get("role") == "user":
                user_messages.append(msg.get("content", ""))
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        full_text = " ".join(user_messages)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
        import re
        
        patterns = {
            'full_name': r'(?:–§–ò–û|—Ñ–∏–æ|–∑–æ–≤—É—Ç|–∏–º—è)[\s:=]+([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)',
            'email': r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
            'phone': r'(\+?[0-9\s\(\)\-]{10,})',
            'organization': r'(?:–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è|–∫–æ–º–ø–∞–Ω–∏—è|–æ–æ–æ|–æ–±—â–µ—Å—Ç–≤–æ)[\s:=]+([^,.\n]+)',
        }
        
        for field, pattern in patterns.items():
            match = re.search(pattern, full_text, re.IGNORECASE)
            if match:
                user_data[field] = match.group(1).strip()
        
        return user_data
    
    def _determine_complaint_category(self, message_lower: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±—ã
        
        Args:
            message_lower: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–ª–æ–±—ã
        """
        if any(word in message_lower for word in ["–æ–±–º–∞–Ω", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "–≤–æ—Ä–æ–≤—Å—Ç–≤–æ", "–∫—Ä–∞–∂–∞", "–ø–æ–¥–¥–µ–ª–∫–∞"]):
            return "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ"
        elif any(word in message_lower for word in ["–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞", "–ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω–æ"]):
            return "–ù–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞"
        elif any(word in message_lower for word in ["–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", "—É—â–µ–º–ª—è—é—Ç –ø—Ä–∞–≤–∞", "–Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∞–≤–∞"]):
            return "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤"
        elif any(word in message_lower for word in ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ", "–ø–ª–æ—Ö–∞—è —Ä–∞–±–æ—Ç–∞", "–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"]):
            return "–ö–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥"
        elif any(word in message_lower for word in ["–Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç", "–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç", "–Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç"]):
            return "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–∫—Ü–∏–∏"
        elif any(word in message_lower for word in ["–æ—Ç–∫–ª–æ–Ω–∏–ª–∏", "–æ—Ç–∫–∞–∑", "–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏"]):
            return "–û—Ç–∫–∞–∑ –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
        elif any(word in message_lower for word in ["–∑–∞—Ç—è–≥–∏–≤–∞—é—Ç", "–º–µ–¥–ª–µ–Ω–Ω–æ", "–¥–æ–ª–≥–æ"]):
            return "–ó–∞—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤"
        else:
            return "–û–±—â–∞—è"
    
    def _determine_complaint_priority(self, message_lower: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∂–∞–ª–æ–±—ã
        
        Args:
            message_lower: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        
        Returns:
            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∂–∞–ª–æ–±—ã
        """
        high_priority_keywords = [
            "—Å—Ä–æ—á–Ω–æ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è", "–æ–ø–∞—Å–Ω–æ", "–æ–ø–∞—Å–Ω–∞—è",
            "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "–≤–æ—Ä–æ–≤—Å—Ç–≤–æ", "–∫—Ä–∞–∂–∞", "–æ–±–º–∞–Ω", "–Ω–µ–∑–∞–∫–æ–Ω–Ω–æ", "–ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω–æ",
            "–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è", "—É—â–µ–º–ª—è—é—Ç –ø—Ä–∞–≤–∞", "–Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∞–≤–∞", "–Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ"
        ]
        
        if any(keyword in message_lower for keyword in high_priority_keywords):
            return "–í—ã—Å–æ–∫–∏–π"
        elif any(word in message_lower for word in ["–≤–∞–∂–Ω–æ", "—Å–µ—Ä—å–µ–∑–Ω–æ", "—Å–µ—Ä—å–µ–∑–Ω–∞—è"]):
            return "–°—Ä–µ–¥–Ω–∏–π"
        else:
            return "–ù–∏–∑–∫–∏–π"
    
    def start_interactive_autofill(self, user_id: str, message: str = None) -> Dict:
        """
        –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            templates = document_service.get_templates_list()
            
            if not templates:
                return {
                    "status": "error",
                    "message": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                }
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            session_id = f"autofill_{user_id}_{int(datetime.now().timestamp())}"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_templates = []
            for template in templates:
                formatted_templates.append({
                    "template_id": template['template_id'],
                    "id": template['template_id'],
                    "name": template['name'],
                    "description": template.get('description', ''),
                    "category": self._get_category_from_name(template['name'])
                })
            
            self.autofill_sessions[session_id] = {
                "user_id": user_id,
                "status": "document_selection",
                "templates": formatted_templates,
                "selected_document": None,
                "user_data": {},
                "questions_asked": [],
                "questions_answered": [],
                "created_at": datetime.now().isoformat()
            }
            
            print(f"[DEBUG] Created session: {session_id} for user: {user_id}")
            print(f"[DEBUG] Total sessions: {len(self.autofill_sessions)}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã)
            document_list = formatted_templates
            
            return {
                "status": "success",
                "session_id": session_id,
                "message": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:",
                "templates": document_list,
                "documents": document_list,  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "next_step": "document_selection"
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            }
    
    def analyze_document_for_autofill(self, user_id: str, document_name: str) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self._find_user_session(user_id)
            if not session:
                return {
                    "status": "error",
                    "message": "–°–µ—Å—Å–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
                }
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            print(f"[DEBUG] –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {document_name}")
            print(f"[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏: {len(session['templates'])}")
            for i, template in enumerate(session['templates']):
                print(f"[DEBUG]   {i+1}. {template.get('name', 'N/A')} (ID: {template.get('id', 'N/A')}, template_id: {template.get('template_id', 'N/A')})")
            
            selected_template = None
            for template in session['templates']:
                if template['name'].lower() == document_name.lower():
                    selected_template = template
                    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏: {template['name']}")
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
            if not selected_template:
                for template in session['templates']:
                    if template.get('template_id') == document_name or template.get('id') == document_name:
                        selected_template = template
                        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω –ø–æ ID: {template.get('id')}")
                        break
            
            if not selected_template:
                return {
                    "status": "error",
                    "message": f"–î–æ–∫—É–º–µ–Ω—Ç '{document_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            session['selected_document'] = selected_template
            session['status'] = 'analysis_complete'
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            required_fields = self._analyze_template_content(selected_template['template_id'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_category = self._get_category_from_name(selected_template['name'])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
            completeness_analysis = self._analyze_data_completeness(session['user_data'], required_fields)
            
            return {
                "status": "success",
                "template_id": selected_template['template_id'],
                "document": {
                    "id": selected_template['template_id'],
                    "name": selected_template['name'],
                    "category": document_category
                },
                "required_fields": required_fields,
                "field_count": len(required_fields),
                "user_data": session['user_data'],
                "needs_data": completeness_analysis['completeness_score'] < 100,
                "completeness_analysis": completeness_analysis,
                "message": f"–î–æ–∫—É–º–µ–Ω—Ç '{selected_template['name']}' –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å {len(required_fields)} –ø–æ–ª–µ–π.",
                "next_step": "data_collection"
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
            }
    
    def ask_questions_for_autofill(self, user_id: str, document_name: str, current_data: dict = None) -> Dict:
        """
        –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            current_data: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self._find_user_session(user_id)
            if not session:
                return {
                    "status": "error",
                    "message": "–°–µ—Å—Å–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            if current_data:
                session['user_data'].update(current_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            selected_template = session['selected_document']
            if not selected_template:
                return {
                    "status": "error",
                    "message": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
                }
            
            template_analysis = self._analyze_templates_for_fields([selected_template])
            required_fields = self._get_required_fields_for_templates(template_analysis)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            missing_fields = []
            for field, label in required_fields.items():
                if not session['user_data'].get(field):
                    missing_fields.append((field, label))
            
            if not missing_fields:
                return {
                    "status": "success",
                    "message": "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã!",
                    "questions": [],
                    "next_step": "ready_to_create"
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
            questions = []
            for i, (field, label) in enumerate(missing_fields[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ä–∞–∑
                question_id = f"q_{field}_{i}"
                question_text = self._generate_question_for_field(field, label, selected_template['name'])
                
                questions.append({
                    "id": question_id,
                    "field": field,
                    "label": label,
                    "question": question_text,
                    "type": self._get_field_input_type(field)
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
            session['status'] = 'collecting_data'
            session['questions_asked'].extend([q['id'] for q in questions])
            
            return {
                "status": "success",
                "questions": questions,
                "progress": {
                    "total_fields": len(required_fields),
                    "filled_fields": len(required_fields) - len(missing_fields),
                    "remaining_fields": len(missing_fields)
                },
                "message": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                "next_step": "answering_questions"
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}"
            }
    
    def answer_question_for_autofill(self, user_id: str, question_id: str, answer: str) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            question_id: ID –≤–æ–ø—Ä–æ—Å–∞
            answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        """
        try:
            print(f"[DEBUG] answer_question_for_autofill called:")
            print(f"  user_id: {user_id}")
            print(f"  question_id: {question_id}")
            print(f"  answer: {answer}")
            print(f"  active sessions: {len(self.autofill_sessions)}")
            for sid, sess in self.autofill_sessions.items():
                print(f"    {sid}: user={sess['user_id']}, status={sess['status']}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self._find_user_session(user_id)
            if not session:
                return {
                    "status": "error",
                    "message": f"–°–µ—Å—Å–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(self.autofill_sessions)}"
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ –∏–∑ question_id (—Ñ–æ—Ä–º–∞—Ç: q_{field}_{i})
            if '_' in question_id and question_id.count('_') >= 2:
                field = question_id.split('_')[1]
            else:
                return {
                    "status": "error",
                    "message": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç question_id: {question_id}"
                }
            
            print(f"[DEBUG] Extracted field: {field}")
            print(f"[DEBUG] Session data: {session}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            if 'user_data' not in session:
                session['user_data'] = {}
            if 'questions_answered' not in session:
                session['questions_answered'] = []
                
            session['user_data'][field] = answer
            session['questions_answered'].append(question_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
            print(f"[DEBUG] questions_asked: {session.get('questions_asked', [])}")
            print(f"[DEBUG] questions_answered: {session.get('questions_answered', [])}")
            
            questions_asked = session.get('questions_asked', [])
            questions_answered = session.get('questions_answered', [])
            remaining_questions = set(questions_asked) - set(questions_answered)
            
            if not remaining_questions:
                # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
                selected_template = session['selected_document']
                template_analysis = self._analyze_templates_for_fields([selected_template])
                required_fields = self._get_required_fields_for_templates(template_analysis)
                
                missing_fields = []
                for field, label in required_fields.items():
                    if not session['user_data'].get(field):
                        missing_fields.append(label)
                
                if not missing_fields:
                    session['status'] = 'ready_to_create'
                    return {
                        "status": "success",
                        "message": "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é.",
                        "next_step": "ready_to_create",
                        "user_data": session['user_data']
                    }
                else:
                    # –ï—Å—Ç—å –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è, –∑–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
                    return self.ask_questions_for_autofill(user_id, selected_template['name'], session['user_data'])
            else:
                return {
                    "status": "success",
                    "message": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.",
                    "remaining_questions": len(remaining_questions),
                    "next_step": "answering_questions"
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            }
    
    def finalize_autofill(self, user_id: str, document_name: str) -> Dict:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session = self._find_user_session(user_id)
            if not session:
                return {
                    "status": "error",
                    "message": "–°–µ—Å—Å–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            
            selected_template = session['selected_document']
            if not selected_template:
                return {
                    "status": "error",
                    "message": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
                }
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            created_document = self.create_document_from_template(
                user_id=user_id,
                template_id=selected_template['template_id'],
                user_data=session['user_data'],
                conversation_data={
                    "message": f"–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_name}",
                    "response": "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å"
                },
                send_email=True
            )
            
            if created_document and created_document.get("status") == "success":
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                session['status'] = 'completed'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
                try:
                    google_sheets_service.save_document({
                        "user_id": user_id,
                        "full_name": session['user_data'].get("full_name", ""),
                        "email": session['user_data'].get("email", ""),
                        "document_type": self._get_category_from_name(selected_template['name']),
                        "template_name": selected_template['name'],
                        "filepath": created_document.get("filepath", ""),
                        "download_url": created_document.get("download_url", ""),
                        "completeness_score": 100,  # –í –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–º–∏
                        "confidence_score": 100,
                        "data_quality": "excellent"
                    })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
                
                return {
                    "status": "success",
                    "message": f"–î–æ–∫—É–º–µ–Ω—Ç '{selected_template['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                    "document": created_document,
                    "user_data": session['user_data']
                }
            else:
                return {
                    "status": "error",
                    "message": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            }
    
    def _find_user_session(self, user_id: str) -> Optional[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ None
        """
        print(f"[DEBUG] –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        print(f"[DEBUG] –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(self.autofill_sessions)}")
        
        for session_id, session in self.autofill_sessions.items():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é: {session_id}, user_id: {session['user_id']}, status: {session['status']}")
            if session['user_id'] == user_id and session['status'] not in ['completed', 'cancelled']:
                print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
                return session
        
        print(f"[DEBUG] –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    def _generate_question_for_field(self, field: str, label: str, document_name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
        
        Args:
            field: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
            label: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
            document_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Returns:
            –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        """
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if '–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ' in document_name.lower() and field == 'full_name':
            return "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ò–≤–∞–Ω–∞ –ò–≤–∞–Ω–æ–≤–∏—á–∞)"
        
        question_templates = {
            "full_name": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "email": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "phone": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "organization": f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "position": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "inn": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ò–ù–ù –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "address": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "passport": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "birth_date": f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'",
            "business_type": f"–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'"
        }
        
        return question_templates.get(field, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ {label.lower()} –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{document_name}'")
    
    def _get_field_input_type(self, field: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—è
        
        Args:
            field: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        
        Returns:
            –¢–∏–ø –ø–æ–ª—è –≤–≤–æ–¥–∞
        """
        input_types = {
            "email": "email",
            "phone": "tel",
            "birth_date": "date",
            "inn": "number"
        }
        
        return input_types.get(field, "text")


assistant_service = AssistantService()

