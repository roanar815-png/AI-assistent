"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ú–°–ü
"""
import aiohttp
from bs4 import BeautifulSoup
from typing import List, Dict
from datetime import datetime
from config import settings
from integrations import google_sheets_service


class MonitoringService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.urls = settings.legislation_urls.split(',')
    
    async def check_legislation_updates(self) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        updates = []
        
        for url in self.urls:
            url = url.strip()
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, timeout=30) as response:
                        if response.status == 200:
                            html = await response.text()
                            parsed_updates = self._parse_legislation_page(html, url)
                            updates.extend(parsed_updates)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets
        for update in updates:
            google_sheets_service.save_legislation_update(
                title=update['title'],
                url=update['url'],
                date=update['date']
            )
        
        return updates
    
    def _parse_legislation_page(self, html: str, source_url: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º
        
        Args:
            html: HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            source_url: URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        updates = []
        soup = BeautifulSoup(html, 'html.parser')
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∞–π—Ç—ã)
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
        for item in soup.find_all(['h2', 'h3', 'a'], limit=10):
            if item.name == 'a' and item.get('href'):
                title = item.get_text(strip=True)
                if len(title) > 20:  # –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏–Ω–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    updates.append({
                        'title': title,
                        'url': item.get('href') if item.get('href').startswith('http') 
                               else f"{source_url}{item.get('href')}",
                        'date': datetime.now().strftime("%Y-%m-%d"),
                        'source': source_url
                    })
        
        return updates[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def get_legislation_summary(self, days: int = 7) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        """
        # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É
        summary = f"""
üìã –°–≤–æ–¥–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ú–°–ü –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:

–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /legislation
"""
        return summary


monitoring_service = MonitoringService()

