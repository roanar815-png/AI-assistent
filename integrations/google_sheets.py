"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import gspread
from google.oauth2.service_account import Credentials
from typing import List, Dict, Optional
from datetime import datetime
import os
from config import settings
from logger_config import get_logger, log_success, log_error, log_warning

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)


class GoogleSheetsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        self.scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        self.creds = None
        self.client = None
        self.spreadsheet = None
        self.last_error: Optional[str] = None
        self._initialize_connection()
    
    def _initialize_connection(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets Service")
            logger.debug(f"   Credentials file: {settings.google_credentials_file}")
            logger.debug(f"   Sheet ID configured: {'YES' if settings.google_sheet_id else 'NO'}")
            
            if not settings.google_sheet_id or not settings.google_sheet_id.strip():
                log_warning(logger, "Google Sheet ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                logger.info("   üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ GOOGLE_SHEET_ID –≤ .env —Ñ–∞–π–ª–µ")
                self.last_error = "GOOGLE_SHEET_ID not configured"
                return
            
            self.creds = Credentials.from_service_account_file(
                settings.google_credentials_file,
                scopes=self.scope
            )
            self.client = gspread.authorize(self.creds)
            self.spreadsheet = self.client.open_by_key(settings.google_sheet_id)
            log_success(logger, "Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω", sheet_id=settings.google_sheet_id[:20]+"...")
            self.last_error = None
        except FileNotFoundError as e:
            log_error(logger, "–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω", error=e, file=settings.google_credentials_file)
            self.last_error = f"Credentials file not found: {settings.google_credentials_file}"
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", error=e)
            self.last_error = str(e)
    
    def _get_or_create_sheet(self, sheet_name: str):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.spreadsheet:
            # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –ø–æ—á–µ–º—É –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            log_warning(logger, "Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –ø—Ä–æ–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏", sheet=sheet_name)
            return None
        try:
            return self.spreadsheet.worksheet(sheet_name)
        except gspread.exceptions.WorksheetNotFound:
            return self.spreadsheet.add_worksheet(title=sheet_name, rows="1000", cols="20")

    def get_status(self) -> Dict:
        """–í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        try:
            status = {
                "has_client": bool(self.client),
                "has_spreadsheet": bool(self.spreadsheet),
                "sheet_id": settings.google_sheet_id or "",
                "credentials_file": settings.google_credentials_file or "",
                "last_error": self.last_error or "",
            }
            return status
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Google Sheets", error=e)
            return {"has_client": False, "has_spreadsheet": False, "last_error": str(e)}

    def reconnect(self) -> Dict:
        """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"""
        self.client = None
        self.spreadsheet = None
        self.creds = None
        self.last_error = None
        self._initialize_connection()
        return self.get_status()
    
    def save_user_data(self, user_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            sheet = self._get_or_create_sheet("Users")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["ID", "–§–ò–û", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", 
                          "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]
                sheet.append_row(headers)
            
            row = [
                user_data.get("user_id", ""),
                user_data.get("full_name", ""),
                user_data.get("email", ""),
                user_data.get("phone", ""),
                user_data.get("organization", ""),
                user_data.get("position", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Google Sheets", user_id=user_data.get("user_id"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error=e)
            return False
    
    def save_feedback(self, feedback: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        try:
            sheet = self._get_or_create_sheet("Feedback")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["User ID", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–∞—Ç–∞"]
                sheet.append_row(headers)
            
            row = [
                feedback.get("user_id", ""),
                feedback.get("message", ""),
                feedback.get("category", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets", user_id=feedback.get("user_id"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", error=e)
            return False
    
    def save_complaint(self, complaint: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∞–ª–æ–±—É"""
        try:
            sheet = self._get_or_create_sheet("Complaints")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["ID", "User ID", "–§–ò–û", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", 
                          "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
                          "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏", "–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"]
                sheet.append_row(headers)
            
            row = [
                complaint.get("complaint_id", ""),
                complaint.get("user_id", ""),
                complaint.get("full_name", ""),
                complaint.get("email", ""),
                complaint.get("phone", ""),
                complaint.get("organization", ""),
                complaint.get("complaint_text", ""),
                complaint.get("category", "–û–±—â–∞—è"),
                complaint.get("priority", "–°—Ä–µ–¥–Ω–∏–π"),
                "–ù–æ–≤–∞—è",
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                ""
            ]
            sheet.append_row(row)
            log_success(logger, "–ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets", user_id=complaint.get("user_id"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã", error=e)
            return False
    
    def save_chat_history(self, user_id: str, message: str, 
                         response: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        try:
            sheet = self._get_or_create_sheet("ChatHistory")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["User ID", "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                          "–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", "–î–∞—Ç–∞"]
                sheet.append_row(headers)
            
            row = [
                user_id,
                message[:100] + "..." if len(message) > 100 else message,  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É
                response[:200] + "..." if len(response) > 200 else response,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞", error=e, user_id=user_id)
            return False
    
    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            sheet = self._get_or_create_sheet("Users")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            try:
                data = sheet.get_all_records(expected_headers=[
                    "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–§–ò–û", "–ò–º—è", "–§–∞–º–∏–ª–∏—è",
                    "–û—Ç—á–µ—Å—Ç–≤–æ", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                    "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "Email", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                ])
                return data
            except Exception as header_error:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {header_error}")
                data = sheet.get_all_records()
                return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", error=e)
            return []
    
    def get_feedback(self, category: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        try:
            sheet = self._get_or_create_sheet("Feedback")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            data = sheet.get_all_records(expected_headers=[
                "ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", 
                "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", 
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
            ])
            
            if category:
                data = [fb for fb in data if fb.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == category]
            
            return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", error=e)
            return []
    
    def get_events(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        try:
            sheet = self._get_or_create_sheet("Events")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
                sheet.append_row(headers)
                return []
            
            data = sheet.get_all_records(expected_headers=[
                "ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", 
                "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", 
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
            ])
            return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", error=e)
            return []
    
    def save_legislation_update(self, title: str, url: str, 
                                date: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        try:
            sheet = self._get_or_create_sheet("Legislation")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"]
                sheet.append_row(headers)
            
            row = [
                title,
                url,
                date,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets", title=title)
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", error=e)
            return False
    
    def save_document(self, document_data: Dict) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        
        Args:
            document_data: –î–∞–Ω–Ω—ã–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - full_name: –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                - document_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                - filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                - download_url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                - completeness_score: –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (%)
                - confidence_score: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)
                - data_quality: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            sheet = self._get_or_create_sheet("Documents")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = [
                    "User ID", 
                    "–§–ò–û", 
                    "Email", 
                    "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", 
                    "–ò–º—è —Ñ–∞–π–ª–∞",
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ",
                    "–ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (%)",
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)",
                    "–ö–∞—á–µ—Å—Ç–≤–æ",
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
                ]
                sheet.append_row(headers)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            from config import settings
            base_url = settings.base_url
            download_url = document_data.get("download_url", "")
            if download_url and not download_url.startswith("http"):
                download_url = f"{base_url}{download_url}"
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—É—Ç–µ–π Windows –∏ POSIX
            filepath = document_data.get("filepath") or ""
            filename = os.path.basename(filepath) if filepath else ""
            
            row = [
                document_data.get("user_id", ""),
                document_data.get("full_name", ""),
                document_data.get("email", ""),
                document_data.get("document_type", ""),
                document_data.get("template_name", ""),
                filename,
                download_url,
                document_data.get("completeness_score", ""),
                document_data.get("confidence_score", ""),
                document_data.get("data_quality", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            
            sheet.append_row(row)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥, –µ—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–ª–∞–¥–∏—Ç—å "–Ω—É–ª–µ–≤—ã–µ" –∑–∞–ø–∏—Å–∏
            if not any([row[0], row[1], row[2], row[3], row[4], row[5], row[6]]):
                log_warning(logger, "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª–µ–π –ø—É—Å—Ç—ã–µ", 
                            filepath=filepath, download_url=download_url)
            else:
                log_success(logger, "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets", 
                           user_id=document_data.get("user_id"), filename=filename)
            return True
            
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Google Sheets", error=e)
            return False

    def save_event(self, event_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
        try:
            sheet = self._get_or_create_sheet("Events")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = [
                    "ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", 
                    "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", 
                    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
                ]
                sheet.append_row(headers)
            
            participants_str = ", ".join(event_data.get("participants", []))
            
            row = [
                event_data.get("event_id", ""),
                event_data.get("title", ""),
                event_data.get("date", ""),
                event_data.get("time", ""),
                event_data.get("description", ""),
                event_data.get("location", ""),
                participants_str,
                event_data.get("organizer", ""),
                event_data.get("status", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets", 
                       event_id=event_data.get("event_id"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", error=e)
            return False

    def save_legislation(self, legislation_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ"""
        try:
            sheet = self._get_or_create_sheet("Legislation")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = [
                    "–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–û–ø–∏—Å–∞–Ω–∏–µ", 
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–í–∞–∂–Ω–æ—Å—Ç—å", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                ]
                sheet.append_row(headers)
            
            row = [
                legislation_data.get("title", ""),
                legislation_data.get("url", ""),
                legislation_data.get("publication_date", ""),
                legislation_data.get("description", ""),
                legislation_data.get("category", ""),
                legislation_data.get("importance", "–°—Ä–µ–¥–Ω—è—è"),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets", 
                       title=legislation_data.get("title"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", error=e)
            return False

    def save_chat_analytics(self, analytics_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            sheet = self._get_or_create_sheet("ChatAnalytics")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = [
                    "ID —Å–µ—Å—Å–∏–∏", "User ID", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π", 
                    "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)", "–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
                    "–û–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã", "–°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (—Å–µ–∫)", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
                ]
                sheet.append_row(headers)
            
            topics_str = ", ".join(analytics_data.get("topics_discussed", []))
            
            row = [
                analytics_data.get("session_id", ""),
                analytics_data.get("user_id", ""),
                analytics_data.get("message_count", 0),
                analytics_data.get("response_time_avg", 0.0),
                analytics_data.get("satisfaction_score", ""),
                topics_str,
                analytics_data.get("documents_created", 0),
                analytics_data.get("session_duration", 0),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets", 
                       session_id=analytics_data.get("session_id"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞", error=e)
            return False

    def get_complaints(self, status: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±"""
        try:
            sheet = self._get_or_create_sheet("Complaints")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–± (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                return []
            
            data = sheet.get_all_records(expected_headers=[
                "ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", 
                "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", 
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
            ])
            
            if status:
                data = [c for c in data if c.get("–°—Ç–∞—Ç—É—Å") == status]
            
            return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±", error=e)
            return []

    def get_events(self, status: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        try:
            sheet = self._get_or_create_sheet("Events")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                return []
            
            data = sheet.get_all_records()
            
            if status:
                data = [e for e in data if e.get("–°—Ç–∞—Ç—É—Å") == status]
            
            return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", error=e)
            return []

    def get_legislation(self, category: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        try:
            sheet = self._get_or_create_sheet("Legislation")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                return []
            
            data = sheet.get_all_records(expected_headers=[
                "ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", 
                "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", 
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
            ])
            
            if category:
                data = [l for l in data if l.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == category]
            
            return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", error=e)
            return []

    def get_chat_analytics(self, user_id: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–∞—Ç–∞"""
        try:
            sheet = self._get_or_create_sheet("ChatAnalytics")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return []
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                return []
            
            data = sheet.get_all_records(expected_headers=[
                "ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", 
                "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", 
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
            ])
            
            if user_id:
                data = [a for a in data if a.get("User ID") == user_id]
            
            return data
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–∞", error=e)
            return []


# Singleton instance
google_sheets_service = GoogleSheetsService()

