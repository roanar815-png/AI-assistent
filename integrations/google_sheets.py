"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from typing import List, Dict, Optional
from datetime import datetime
from config import settings
from logger_config import get_logger, log_success, log_error, log_warning

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)


class GoogleSheetsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        self.scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        self.creds = None
        self.client = None
        self.spreadsheet = None
        self._initialize_connection()
    
    def _initialize_connection(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets Service")
            logger.debug(f"   Credentials file: {settings.google_credentials_file}")
            logger.debug(f"   Sheet ID configured: {'YES' if settings.google_sheet_id else 'NO'}")
            
            if not settings.google_sheet_id or not settings.google_sheet_id.strip():
                log_warning(logger, "Google Sheet ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                logger.info("   üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ GOOGLE_SHEET_ID –≤ .env —Ñ–∞–π–ª–µ")
                return
            
            self.creds = ServiceAccountCredentials.from_json_keyfile_name(
                settings.google_credentials_file,
                self.scope
            )
            self.client = gspread.authorize(self.creds)
            self.spreadsheet = self.client.open_by_key(settings.google_sheet_id)
            log_success(logger, "Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω", sheet_id=settings.google_sheet_id[:20]+"...")
        except FileNotFoundError as e:
            log_error(logger, "–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω", error=e, file=settings.google_credentials_file)
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets", error=e)
    
    def _get_or_create_sheet(self, sheet_name: str):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.spreadsheet:
            logger.debug(f"Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏: {sheet_name}")
            return None
        try:
            return self.spreadsheet.worksheet(sheet_name)
        except gspread.exceptions.WorksheetNotFound:
            return self.spreadsheet.add_worksheet(title=sheet_name, rows="1000", cols="20")
    
    def save_user_data(self, user_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            sheet = self._get_or_create_sheet("Users")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["ID", "–§–ò–û", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", 
                          "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]
                sheet.append_row(headers)
            
            row = [
                user_data.get("user_id", ""),
                user_data.get("full_name", ""),
                user_data.get("email", ""),
                user_data.get("phone", ""),
                user_data.get("organization", ""),
                user_data.get("position", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            log_success(logger, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Google Sheets", user_id=user_data.get("user_id"))
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", error=e)
            return False
    
    def save_application(self, application: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
        try:
            sheet = self._get_or_create_sheet("Applications")
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["ID", "–§–ò–û", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ò–ù–ù", "Email", 
                          "–¢–µ–ª–µ—Ñ–æ–Ω", "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏", "–°—Ç–∞—Ç—É—Å"]
                sheet.append_row(headers)
            
            row = [
                application.get("user_id", ""),
                application.get("full_name", ""),
                application.get("organization", ""),
                application.get("inn", ""),
                application.get("email", ""),
                application.get("phone", ""),
                application.get("business_type", ""),
                application.get("comment", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "–ù–æ–≤–∞—è"
            ]
            sheet.append_row(row)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def save_feedback(self, feedback: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        try:
            sheet = self._get_or_create_sheet("Feedback")
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["User ID", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–∞—Ç–∞"]
                sheet.append_row(headers)
            
            row = [
                feedback.get("user_id", ""),
                feedback.get("message", ""),
                feedback.get("category", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return False
    
    def save_complaint(self, complaint: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∞–ª–æ–±—É"""
        try:
            sheet = self._get_or_create_sheet("Complaints")
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["ID", "User ID", "–§–ò–û", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", 
                          "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
                          "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏", "–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"]
                sheet.append_row(headers)
            
            row = [
                complaint.get("complaint_id", ""),
                complaint.get("user_id", ""),
                complaint.get("full_name", ""),
                complaint.get("email", ""),
                complaint.get("phone", ""),
                complaint.get("organization", ""),
                complaint.get("complaint_text", ""),
                complaint.get("category", "–û–±—â–∞—è"),
                complaint.get("priority", "–°—Ä–µ–¥–Ω–∏–π"),
                "–ù–æ–≤–∞—è",
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                ""
            ]
            sheet.append_row(row)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã: {e}")
            return False
    
    def save_chat_history(self, user_id: str, message: str, 
                         response: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        try:
            sheet = self._get_or_create_sheet("ChatHistory")
            if not sheet:
                logger.debug("–ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
                return False
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["User ID", "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                          "–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", "–î–∞—Ç–∞"]
                sheet.append_row(headers)
            
            row = [
                user_id,
                message[:100] + "..." if len(message) > 100 else message,  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É
                response[:200] + "..." if len(response) > 200 else response,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}")
            return True
        except Exception as e:
            log_error(logger, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞", error=e, user_id=user_id)
            return False
    
    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            sheet = self._get_or_create_sheet("Users")
            data = sheet.get_all_records()
            return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_applications(self, status: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏"""
        try:
            sheet = self._get_or_create_sheet("Applications")
            data = sheet.get_all_records()
            
            if status:
                data = [app for app in data if app.get("–°—Ç–∞—Ç—É—Å") == status]
            
            return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_feedback(self, category: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        try:
            sheet = self._get_or_create_sheet("Feedback")
            data = sheet.get_all_records()
            
            if category:
                data = [fb for fb in data if fb.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == category]
            
            return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return []
    
    def get_events(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        try:
            sheet = self._get_or_create_sheet("Events")
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
                sheet.append_row(headers)
                return []
            
            data = sheet.get_all_records()
            return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
            return []
    
    def save_legislation_update(self, title: str, url: str, 
                                date: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        try:
            sheet = self._get_or_create_sheet("Legislation")
            
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"]
                sheet.append_row(headers)
            
            row = [
                title,
                url,
                date,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            sheet.append_row(row)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {e}")
            return False
    
    def save_document(self, document_data: Dict) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
        
        Args:
            document_data: –î–∞–Ω–Ω—ã–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - full_name: –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                - document_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                - filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
                - download_url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                - completeness_score: –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (%)
                - confidence_score: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)
                - data_quality: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            sheet = self._get_or_create_sheet("Documents")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
            if sheet.row_count == 0 or not sheet.row_values(1):
                headers = [
                    "User ID", 
                    "–§–ò–û", 
                    "Email", 
                    "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", 
                    "–ò–º—è —Ñ–∞–π–ª–∞",
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ",
                    "–ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (%)",
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)",
                    "–ö–∞—á–µ—Å—Ç–≤–æ",
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
                ]
                sheet.append_row(headers)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            base_url = "http://localhost:8000"  # TODO: –±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            download_url = document_data.get("download_url", "")
            if download_url and not download_url.startswith("http"):
                download_url = f"{base_url}{download_url}"
            
            filename = document_data.get("filepath", "").split("/")[-1] if document_data.get("filepath") else ""
            
            row = [
                document_data.get("user_id", ""),
                document_data.get("full_name", ""),
                document_data.get("email", ""),
                document_data.get("document_type", ""),
                document_data.get("template_name", ""),
                filename,
                download_url,
                document_data.get("completeness_score", ""),
                document_data.get("confidence_score", ""),
                document_data.get("data_quality", ""),
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            
            sheet.append_row(row)
            print(f"[OK] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets: {filename}", flush=True)
            return True
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Google Sheets: {e}", flush=True)
            import traceback
            traceback.print_exc()
            return False


# Singleton instance
google_sheets_service = GoogleSheetsService()

