/**
 * AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç - –ß–∞—Ç-–≤–∏–¥–∂–µ—Ç
 */

class ChatWidget {
    constructor() {
        this.apiUrl = window.location.origin + '/api';  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π API URL
        this.userId = this.generateUserId();
        this.isOpen = false;
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
        this.setupErrorHandling();
        
        this.initElements();
        this.attachEventListeners();
    }
    
    setupErrorHandling() {
        // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
        const originalError = console.error;
        console.error = (...args) => {
            const message = args.join(' ');
            if (message.includes('message port closed') || 
                message.includes('message channel closed') ||
                message.includes('runtime.lastError')) {
                console.warn('Browser extension error suppressed:', message);
                return;
            }
            originalError.apply(console, args);
        };
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        window.addEventListener('unhandledrejection', (event) => {
            if (event.reason && event.reason.message && (
                event.reason.message.includes('message channel closed') ||
                event.reason.message.includes('message port closed') ||
                event.reason.message.includes('runtime.lastError')
            )) {
                console.warn('Browser extension promise rejection suppressed:', event.reason.message);
                event.preventDefault();
            }
        });
    }
    
    initElements() {
        this.chatButton = document.getElementById('chat-button');
        this.chatWidget = document.getElementById('chat-widget');
        this.closeButton = document.getElementById('close-chat');
        this.chatMessages = document.getElementById('chat-messages');
        this.chatInput = document.getElementById('chat-input');
        this.sendButton = document.getElementById('send-button');
        this.quickActions = document.querySelectorAll('.quick-action-btn');
    }
    
    attachEventListeners() {
        this.chatButton.addEventListener('click', () => this.toggleChat());
        this.closeButton.addEventListener('click', () => this.toggleChat());
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        this.quickActions.forEach(btn => {
            btn.addEventListener('click', () => {
                const action = btn.getAttribute('data-action');
                this.handleQuickAction(action);
            });
        });
    }
    
    toggleChat() {
        this.isOpen = !this.isOpen;
        
        if (this.isOpen) {
            this.chatWidget.classList.add('active');
            this.chatButton.classList.add('hidden');
            this.chatInput.focus();
        } else {
            this.chatWidget.classList.remove('active');
            this.chatButton.classList.remove('hidden');
        }
    }
    
    async sendMessage() {
        const message = this.chatInput.value.trim();
        
        if (!message) return;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addMessage(message, 'user');
        this.chatInput.value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        this.showTypingIndicator();
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            const response = await fetch(`${this.apiUrl}/chat/message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: this.userId,
                    message: message
                })
            });
            
            const data = await response.json();
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            this.hideTypingIndicator();
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            this.addMessage(data.response, 'bot');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if (data.action === 'open_templates') {
                this.openTemplatesWindow();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (data.document_suggestion && data.document_suggestion.suggested) {
                this.showDocumentSuggestion(data.document_suggestion);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            this.hideTypingIndicator();
            this.addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
        }
    }
    
    addMessage(text, sender, attachments = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        const formattedText = this.formatMessage(text);
        contentDiv.innerHTML = formattedText;
        
        messageDiv.appendChild(contentDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if (attachments && attachments.length > 0) {
            const attachmentsDiv = document.createElement('div');
            attachmentsDiv.className = 'message-attachments';
            
            attachments.forEach(attachment => {
                const link = document.createElement('a');
                link.href = attachment.url;
                link.download = attachment.filename;
                link.className = 'attachment-link';
                link.innerHTML = `üìÑ ${attachment.filename}`;
                attachmentsDiv.appendChild(link);
            });
            
            messageDiv.appendChild(attachmentsDiv);
        }
        
        this.chatMessages.appendChild(messageDiv);
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        this.scrollToBottom();
    }
    
    formatMessage(text) {
        if (!text) return '';
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏
        let formatted = text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown **–∂–∏—Ä–Ω—ã–π** –≤ HTML
        formatted = formatted.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º URLs –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        const urlPattern = /(https?:\/\/[^\s]+)/g;
        formatted = formatted.replace(urlPattern, (url) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
            if (url.includes('/api/documents/download')) {
                return `<a href="${url}" target="_blank" class="download-link" download style="display: inline-block; margin: 10px 0; padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 8px; font-weight: 600; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);">üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>`;
            }
            return `<a href="${url}" target="_blank" class="message-link">${url}</a>`;
        });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ <br>
        formatted = formatted.replace(/\n/g, '<br>');
        
        return formatted;
    }
    
    showTypingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'message bot-message';
        indicator.id = 'typing-indicator';
        
        const content = document.createElement('div');
        content.className = 'typing-indicator';
        content.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;
        
        indicator.appendChild(content);
        this.chatMessages.appendChild(indicator);
        this.scrollToBottom();
    }
    
    hideTypingIndicator() {
        const indicator = document.getElementById('typing-indicator');
        if (indicator) {
            indicator.remove();
        }
    }
    
    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
    
    showDocumentSuggestion(suggestion) {
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        if (suggestion.created_document && suggestion.created_document.status === 'success') {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message bot-message document-created';
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.style.background = 'linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%)';
            contentDiv.style.borderLeft = '4px solid #28a745';
            contentDiv.style.padding = '20px';
            contentDiv.style.borderRadius = '15px';
            contentDiv.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.2)';
            
            contentDiv.innerHTML = `
                <div style="text-align: center;">
                    <h3 style="margin: 0 0 10px 0; color: #155724; font-size: 18px;">‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!</h3>
                    <p style="margin: 0 0 15px 0; color: #155724;">–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.</p>
                    <a href="${window.location.origin}${suggestion.created_document.download_url}" 
                       style="display: inline-block; background: linear-gradient(135deg, #28a745 0%, #218838 100%); 
                              color: white; text-decoration: none; padding: 15px 25px; 
                              border-radius: 10px; text-align: center; margin-top: 15px;
                              font-weight: bold; transition: all 0.3s; box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);"
                       onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 16px rgba(40, 167, 69, 0.4)';"
                       onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(40, 167, 69, 0.3)';">
                        üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                    </a>
                </div>
            `;
            
            messageDiv.appendChild(contentDiv);
            this.chatMessages.appendChild(messageDiv);
            this.scrollToBottom();
            return;
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message bot-message document-suggestion';
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º formatMessage –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        contentDiv.innerHTML = this.formatMessage(suggestion.message);
        
        messageDiv.appendChild(contentDiv);
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (suggestion.templates && suggestion.templates.length > 0 && !suggestion.created_document) {
            const templatesDiv = document.createElement('div');
            templatesDiv.className = 'templates-list';
            
            suggestion.templates.forEach(template => {
                const templateButton = document.createElement('button');
                templateButton.className = 'template-button';
                templateButton.textContent = template.name;
                templateButton.onclick = () => this.createDocument(template.template_id, suggestion.user_data, suggestion.conversation_data);
                templatesDiv.appendChild(templateButton);
            });
            
            messageDiv.appendChild(templatesDiv);
        }
        
        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }
    
    async createDocument(templateId, userData, conversationData) {
        try {
            this.showTypingIndicator();
            
            const response = await fetch(`${this.apiUrl}/chat/create-document`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: this.userId,
                    template_id: templateId,
                    user_data: userData,
                    conversation_data: conversationData,
                    send_email: true
                })
            });
            
            const data = await response.json();
            this.hideTypingIndicator();
            
            if (data.status === 'success') {
                this.addMessage(data.message, 'bot', [{
                    url: data.download_url,
                    filename: data.filepath.split('/').pop()
                }]);
            } else {
                this.addMessage(`–û—à–∏–±–∫–∞: ${data.message}`, 'bot');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
            this.hideTypingIndicator();
            this.addMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
        }
    }
    
    async handleQuickAction(action) {
        let message = '';
        
        switch(action) {
            case 'sme-analysis':
                message = '–ü–æ–∫–∞–∂–∏ –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞';
                break;
            case 'application':
                message = '–•–æ—á—É –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –û–ø–æ—Ä—É –†–æ—Å—Å–∏–∏';
                break;
            case 'events':
                message = '–ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã?';
                break;
            case 'legislation':
                message = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –¥–ª—è –ú–°–ü';
                break;
        }
        
        if (message) {
            this.chatInput.value = message;
            this.sendMessage();
        }
    }
    
    generateUserId() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ ID –≤ localStorage
        let userId = localStorage.getItem('chat_user_id');
        
        if (!userId) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
            userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('chat_user_id', userId);
        }
        
        return userId;
    }
    
    openTemplatesWindow() {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å —à–∞–±–ª–æ–Ω–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ main-interface.html
        if (typeof startAutofillProcess === 'function') {
            // –ï—Å–ª–∏ –º—ã –≤ main-interface.html, –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            startAutofillProcess();
        } else {
            // –ï—Å–ª–∏ –º—ã –≤ chat-widget, —Å–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            this.showTemplateSelection();
        }
    }
    
    async showTemplateSelection() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ API
            const response = await fetch(`${this.apiUrl}/documents/templates/list`);
            const templates = await response.json();
            
            if (templates && templates.length > 0) {
                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —à–∞–±–ª–æ–Ω–æ–≤
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message bot-message';
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'message-content';
                contentDiv.style.background = 'linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%)';
                contentDiv.style.borderLeft = '4px solid #2196f3';
                contentDiv.style.padding = '20px';
                contentDiv.style.borderRadius = '15px';
                contentDiv.style.boxShadow = '0 4px 12px rgba(33, 150, 243, 0.2)';
                
                contentDiv.innerHTML = `
                    <div style="font-size: 18px; margin-bottom: 15px;">üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</div>
                    <div style="font-size: 14px; color: #666; margin-bottom: 20px;">
                        –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    </div>
                `;
                
                // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
                const templatesDiv = document.createElement('div');
                templatesDiv.style.marginTop = '15px';
                
                templates.forEach(template => {
                    const templateButton = document.createElement('button');
                    templateButton.style.display = 'block';
                    templateButton.style.width = '100%';
                    templateButton.style.margin = '8px 0';
                    templateButton.style.padding = '15px 20px';
                    templateButton.style.background = 'white';
                    templateButton.style.border = '2px solid #2196f3';
                    templateButton.style.borderRadius = '12px';
                    templateButton.style.cursor = 'pointer';
                    templateButton.style.textAlign = 'left';
                    templateButton.style.fontSize = '14px';
                    templateButton.style.transition = 'all 0.3s';
                    templateButton.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                    
                    templateButton.innerHTML = `
                        <div style="font-weight: 600; margin-bottom: 5px;">üìÑ ${template.name}</div>
                        <div style="font-size: 12px; color: #666;">${template.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                    `;
                    
                    templateButton.onclick = () => this.selectTemplateForAutofill(template.template_id, template.name);
                    templateButton.onmouseover = () => {
                        templateButton.style.background = '#2196f3';
                        templateButton.style.color = 'white';
                        templateButton.style.transform = 'translateY(-2px)';
                        templateButton.style.boxShadow = '0 4px 12px rgba(33, 150, 243, 0.3)';
                    };
                    templateButton.onmouseout = () => {
                        templateButton.style.background = 'white';
                        templateButton.style.color = '#333';
                        templateButton.style.transform = 'translateY(0)';
                        templateButton.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                    };
                    templatesDiv.appendChild(templateButton);
                });
                
                contentDiv.appendChild(templatesDiv);
                messageDiv.appendChild(contentDiv);
                this.chatMessages.appendChild(messageDiv);
                this.scrollToBottom();
                
            } else {
                this.addMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
            this.addMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
        }
    }
    
    async selectTemplateForAutofill(templateId, templateName) {
        try {
            this.showTypingIndicator();
            
            const response = await fetch(`${this.apiUrl}/chat/interactive-autofill/analyze-document?user_id=${this.userId}&document_name=${encodeURIComponent(templateName)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const data = await response.json();
            this.hideTypingIndicator();
            
            if (data.status === 'success') {
                this.addMessage(`‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: ${templateName}`, 'bot');
                this.showDataAnalysisAndQuestions(data);
            } else {
                this.addMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`, 'bot');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞:', error);
            this.hideTypingIndicator();
            this.addMessage('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
        }
    }
    
    showDataAnalysisAndQuestions(analysisData) {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message bot-message';
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.style.background = 'linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%)';
        contentDiv.style.borderLeft = '4px solid #28a745';
        contentDiv.style.padding = '20px';
        contentDiv.style.borderRadius = '15px';
        contentDiv.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.2)';
        
        const completeness = analysisData.completeness_analysis || {};
        const needsData = analysisData.needs_data !== false;
        
        let htmlContent = '';
        
        if (needsData) {
            htmlContent += `<div style="font-size: 18px; margin-bottom: 15px;">‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</div>`;
        } else {
            htmlContent += `<div style="font-size: 18px; margin-bottom: 15px;">‚úÖ –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç!</div>`;
        }
        
        if (completeness.completeness_score !== undefined) {
            htmlContent += `
                <div style="background: white; padding: 15px; border-radius: 10px; margin: 10px 0;">
                    <div style="margin-bottom: 10px;"><strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</strong></div>
                    <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                        <div style="flex: 1; min-width: 120px; padding: 10px; background: #e3f2fd; border-radius: 8px; text-align: center;">
                            <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${completeness.completeness_score}%</div>
                            <div style="font-size: 12px; color: #666;">–ü–æ–ª–Ω–æ—Ç–∞</div>
                        </div>
                        <div style="flex: 1; min-width: 120px; padding: 10px; background: #fff3e0; border-radius: 8px; text-align: center;">
                            <div style="font-size: 24px; font-weight: bold; color: #f57c00;">${completeness.confidence_score || 0}%</div>
                            <div style="font-size: 12px; color: #666;">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        htmlContent += `
            <button onclick="window.chatWidget.createDocument('${analysisData.template_id}', ${JSON.stringify(analysisData.user_data || {}).replace(/"/g, '&quot;')}, { message: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞', response: '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è' })" 
                    style="display: block; width: 100%; margin: 15px 0; padding: 15px; background: linear-gradient(135deg, #28a745 0%, #218838 100%); color: white; border: none; border-radius: 10px; cursor: pointer; font-size: 16px; font-weight: 600; transition: all 0.3s;"
                    onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 16px rgba(40, 167, 69, 0.4)';"
                    onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none';">
                üöÄ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
            </button>
        `;
        
        contentDiv.innerHTML = htmlContent;
        messageDiv.appendChild(contentDiv);
        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.chatWidget = new ChatWidget();
});

