"""
üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –£–º–Ω–æ–≥–æ –ü–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –î–æ–∫—É–º–µ–Ω—Ç–æ–≤
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ä–≤–µ—Ä: python main.py
"""
import requests
import json
import time

BASE_URL = "http://localhost:8000"
USER_ID = "test-smart-assistant-001"

def print_section(title):
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70)

def check_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=2)
        return response.status_code == 200
    except:
        return False

def send_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    print(f"\nüí¨ –í—ã: {message}")
    
    response = requests.post(
        f"{BASE_URL}/api/chat/message",
        json={"user_id": USER_ID, "message": message}
    )
    
    result = response.json()
    print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {result.get('response', '')[:200]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º document_suggestion
    doc_sugg = result.get("document_suggestion")
    if doc_sugg:
        print("\nüìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê:")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
        rec = doc_sugg.get("template_recommendation", {})
        if rec:
            print(f"  üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —à–∞–±–ª–æ–Ω: {rec.get('suggested_template_name', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
            print(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.get('confidence', 0)}%")
            print(f"  üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {rec.get('document_category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã
        comp = doc_sugg.get("completeness_analysis", {})
        if comp:
            print(f"\n  üìä –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê:")
            print(f"    ‚îú‚îÄ Completeness Score: {comp.get('completeness_score', 0)}%")
            print(f"    ‚îú‚îÄ Confidence Score: {comp.get('confidence_score', 0)}%")
            print(f"    ‚îú‚îÄ Data Quality: {comp.get('data_quality', 'unknown')}")
            print(f"    ‚îî‚îÄ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: {'‚úÖ –î–ê' if comp.get('can_generate') else '‚ùå –ù–ï–¢'}")
            
            missing = comp.get('missing_fields', [])
            if missing:
                print(f"\n  ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è ({len(missing)}):")
                for field in missing[:5]:
                    print(f"      ‚Ä¢ {field}")
            
            recommendations = comp.get('recommendations', [])
            if recommendations:
                print(f"\n  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in recommendations[:3]:
                    print(f"      ‚Ä¢ {rec}")
            
            questions = comp.get('suggested_questions', [])
            if questions:
                print(f"\n  ‚ùì –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
                for q in questions[:3]:
                    print(f"      ‚Ä¢ {q}")
    
    return result

def main():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                      ‚ïë
‚ïë   üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –£–ú–ù–û–ì–û –ü–û–ú–û–©–ù–ò–ö–ê –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í                  ‚ïë
‚ïë                                                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    if not check_server():
        print("""
‚ùå –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!

–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
    python main.py

–ò–ª–∏:
    uvicorn main:app --reload --host 0.0.0.0 --port 8000

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.
        """)
        return
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!\n")
    
    # –¢–ï–°–¢ 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print_section("–¢–ï–°–¢ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
    send_message("–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
    time.sleep(1)
    
    # –¢–ï–°–¢ 2: –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print_section("–¢–ï–°–¢ 2: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
    send_message("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, email: ivan@example.com, —Ç–µ–ª–µ—Ñ–æ–Ω +79991234567")
    time.sleep(1)
    
    # –¢–ï–°–¢ 3: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print_section("–¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    send_message("""
    –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.
    –§–ò–û: –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á
    Email: petrov@mail.ru
    –¢–µ–ª–µ—Ñ–æ–Ω: +79991234567
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: –û–û–û –£—Å–ø–µ—Ö
    –ò–ù–ù: 1234567890
    –î–æ–ª–∂–Ω–æ—Å—Ç—å: –î–∏—Ä–µ–∫—Ç–æ—Ä
    """)
    time.sleep(1)
    
    # –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    print_section("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    try:
        response = requests.get(f"{BASE_URL}/api/documents/templates")
        templates = response.json()
        
        if templates:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            for i, tmpl in enumerate(templates, 1):
                print(f"  {i}. {tmpl.get('name')} (ID: {tmpl.get('template_id')[:8]}...)")
            
            # –¢–ï–°–¢ 5: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –ø–µ—Ä–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
            if len(templates) > 0:
                template_id = templates[0]["template_id"]
                
                print_section("–¢–ï–°–¢ 5: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                print(f"\nüìÑ –®–∞–±–ª–æ–Ω: {templates[0]['name']}")
                
                preview_response = requests.post(
                    f"{BASE_URL}/api/chat/preview-document",
                    params={"template_id": template_id},
                    json={
                        "full_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                        "email": "ivan@mail.ru",
                        "phone": "+79991234567",
                        "organization": "–û–û–û –¢–µ—Å—Ç",
                        "inn": "1234567890",
                        "position": "–î–∏—Ä–µ–∫—Ç–æ—Ä"
                    }
                )
                
                preview = preview_response.json()
                if preview.get("status") == "success":
                    print(f"\n‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω!")
                    print(f"\n{preview.get('preview', '')[:300]}...")
                    
                    comp = preview.get('completeness', {})
                    print(f"\nüìä –ú–ï–¢–†–ò–ö–ò –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê:")
                    print(f"  ‚îú‚îÄ Completeness: {comp.get('completeness_score', 0)}%")
                    print(f"  ‚îú‚îÄ Confidence: {comp.get('confidence_score', 0)}%")
                    print(f"  ‚îî‚îÄ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: {'‚úÖ –î–ê' if preview.get('can_generate') else '‚ùå –ù–ï–¢'}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {preview.get('message')}")
        else:
            print("\n‚ö†Ô∏è  –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —à–∞–±–ª–æ–Ω:")
            print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000/static/template-manager.html")
            print("  2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API: POST /api/documents/upload")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ò—Ç–æ–≥–∏
    print_section("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("""
üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
  ‚Ä¢ SMART_DOCUMENT_ASSISTANT_GUIDE.md - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
  ‚Ä¢ TESTING_SMART_ASSISTANT.md - –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç–µ—Å—Ç—ã
  ‚Ä¢ SMART_ASSISTANT_UPDATE_SUMMARY.md - –û–±–∑–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
  ‚Ä¢ –ß–∞—Ç: http://localhost:8000/static/chat-widget.html
  ‚Ä¢ –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000/static/main-interface.html
  ‚Ä¢ API Docs: http://localhost:8000/docs

üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
  1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
  2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()









